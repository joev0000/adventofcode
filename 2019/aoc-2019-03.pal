; ADVENT OF CODE: DAY 3
; CROSSED WIRES

; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        SUB     #14,SP          ; LOCALS
                                ; 12(SP): PATH2+2(R2)
                                ; 10(SP): PATH2-2(R2)
                                ;  6(SP): PATH1+2(R1)
                                ;  4(SP): PATH1-2(R1)
                                ;  2(SP): END OF PATH1
                                ;  0(SP): END OF PATH2

        MOV     #PTIN,-(SP)     ; PUSH PTIN STREAM
        MOV     #PATH1,-(SP)    ; PUSH PATH1
        JSR     PC,PARSE        ; PARSE THE PATH
        ADD     #4,SP           ; CLEAN UP STACK
        SUB     #PATH1,R0       ; R0 <- LENGTH OF PATH1
        MOV     R0,2(SP)        ; SAVE THE LENGTH OF PATH1

        MOV     #PTIN,-(SP)     ; PUSH PTIN STREAM
        MOV     #PATH2,-(SP)    ; PUSH PATH2
        JSR     PC,PARSE        ; PARSE THE PATH
        ADD     #4,SP           ; CLEAN UP STACK
        SUB     #PATH2,R0       ; R0 <- LENGTH OF PATH2
        MOV     R0,(SP)         ; SAVE THE LENGTH OF PATH2

        ; 0,x0,y0,x1,y1,x2,y2
        ;
        ; i1 = 1
        ; i2 = 2
        ;
        ; path1(i1-1) <= path2(i2) && path2(i2) <= path1(i1+1)
        ; path2(i2-1) <= path1(i1) && path1(i1) <= path2(i2+1)
        ;
        ; Check horizontals of PATH1 vs. verticals of PATH2
        ; Check verticals of PATH1 vs. horizontals of PATH2
        ; Compare lower value vs. higher value.

        MOV     #2,R5           ; R5 <- PATH2 START OFFSET
        MOV     #2,R1           ; R1 <- INDEX IN PATH1
L1:
        CMP     R1,2(SP)        ; ARE WE AT THE END?
        BGE     L9              ; IF SO, WE'RE DONE

        ; LOAD PATH1 SEGMENT ENDS TO LOCALS
        MOV     PATH1-2(R1),4(SP)
        MOV     PATH1+2(R1),6(SP)

        CMP     4(SP),6(SP)     ; COMPARE PATH1-2 AND PATH1+2
        BLT     L5              ; IF SO, THEY ARE IN CORRECT ORDER
        MOV     4(SP),R0        ; IF NOT, SWAP THEM
        MOV     6(SP),4(SP)
        MOV     R0,6(SP)

L5:
        MOV     #2,R2           ; R2 <- INDEX IN PATH2
        ADD     R5,R2           ; ADD PATH2 START OFFSET
L2:
        CMP     R2,(SP)         ; ARE WE AT THE END OF PATH2?
        BGE     L3              ; IF SO, MOVE ON TO NEXT PATH1

        ; LOAD PATH2 SEGMENT ENDS TO LOCALS
        MOV     PATH2-2(R2),10(SP)
        MOV     PATH2+2(R2),12(SP)

        CMP     10(SP),12(SP)   ; COMPARE PATH2-2 AND PATH2+2
        BLT     L4              ; IF SO, THEY ARE IN CORRECT ORDER
        MOV     10(SP),R0       ; IF NOT, SWAP THEM
        MOV     12(SP),10(SP)
        MOV     R0,12(SP)
L4:
        CMP     4(SP),PATH2(R2) ; IS PATH1-2(R1) <= PATH2(R2)?
        BGT     L6              ; IF NOT, NO INTERSECTION
        CMP     PATH2(R2),6(SP) ; IS PATH2(R2) <= PATH1+2(R1)?
        BGT     L6              ; IF NOT, NO INTERSECTION
        CMP     10(SP),PATH1(R1); IS PATH2-2(R2) <= PATH1(R1)?
        BGT     L6              ; IF NOT, NO INTERSECTION
        CMP     PATH1(R1),12(SP); IS PATH1(R1) <= PATH2+2(R2)?
        BGT     L6              ; IF NOT, NO INTERSECTION

        ; PRINT MATCH COORDINATES
        TST     R5              ; IS PATH1 THE HORIZONTAL ELEMENT?
        BNE     LLL             ; IF NOT, SKIP AHEAD
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     PATH1(R1),-(SP) ; LO <- PATH1 VALUE
        CLR     -(SP)           ; HI <- ZERO
        JSR     PC,FU3210       ; FU3210(HI,LO,STREAM)
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     #054,-(SP)      ; C <- COMMA
        JSR     PC,FPUTC        ; FPUTC(C, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

LLL:

        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     PATH2(R2),-(SP) ; LO <- PATH2 VALUE
        CLR     -(SP)           ; HI <- ZERO
        JSR     PC,FU3210       ; FU3210(HI,LO,STREAM)
        ADD     #6,SP           ; CLEAN UP STACK
        TST     R5              ; IS PATH1 THE HORIZONTAL ELEMENT?
        BEQ     GGG             ; IF SO, SKIP AHEAD

        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     #054,-(SP)      ; C <- COMMA
        JSR     PC,FPUTC        ; FPUTC(C,STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     PATH1(R1),-(SP) ; LO <- PATH1 VALUE
        CLR     -(SP)           ; HI <- ZERO
        JSR     PC,FU3210       ; FU3210(HI,LO,STREAM)
        ADD     #6,SP           ; CLEAN UP STACK

GGG:
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     #015,-(SP)      ; C <- CR
        JSR     PC,FPUTC        ; FPUTC(C, STREAM)
        MOV     #012,(SP)       ; C <- LF
        JSR     PC,FPUTC        ; FPUTC(C, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

L6:
        ADD     #4,R2           ; NEXT PARALLEL ELEMENT IN PATH2
        BR      L2              ; NEXT ELEMENT IN PATH2
L3:
        ADD     #2,R1           ; INCREMENT PATH1 INDEX
        NEG     R5              ; TOGGLE PATH2 START OFFSET
        ADD     #2,R5           ;   USING R5 = 2 - R5
        BR      L1              ; NEXT ELEMENT IN PATH1
L9:
        HALT                    ; PROGRAM COMPLETE
        JMP     START           ; RESTART ON CONTINUE

;
; PARSE(ADDRESS, STREAM) R0: ADDRESS END
;
; PARSE A PATH INTO THE GIVEN ADDRESS
;
; DATA IS STORED AS A SERIES OF X AND Y VALUES.
; EXAMPLE: R75,D30,R83,U83,L12 IS STORED AS 75,-30,158,53,146 (10).
PARSE:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4

        MOV     10(SP),R2       ; R2 <- ADDRESS
        MOV     12(SP),R3       ; R3 <- STREAM

        CLR     (R2)+           ; ADD LEADING ZERO
        CLR     (R2)+           ; CLEAR THE FIRST COORDINATE
        MOV     R3,-(SP)        ; STREAM = R3
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
        CMP     #'U,R0          ; IS IT U?
        BEQ     PDU1            ; YES, HANDLE VERTICAL FIRST
        CMP     #'D,R0          ; IS IT D?
        BEQ     PDU1            ; YES, HANDLE VERITICAL FIRST
        BR      P1              ; NO, CONTINUE
PDU1:   CLR     (R2)+           ; FIRST HORIZONTAL IS ZERO
        BR      P1              ; PARSE NUMBER

P0:
        MOV     R3,-(SP)        ; STREAM = R3
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
P1:
        CMP     #'D,R0          ; IS IT D?
        BEQ     PDL             ; YES, NEGATE
        CMP     #'L,R0          ; IS IT L?
        BEQ     PDL             ; YES, NEGATE
        BIC     #1,R4           ; CLEAR NEGATE FLAG
        BR      PNN             ; SKIP, NOT NEGATIVE
PDL:    BIS     #1,R4           ; SET NEGATE FLAG

PNN:
        MOV     R3,-(SP)        ; PUSH STREAM
        JSR     PC,P10U32       ; PARSE NUMBER
        BCS     PDONE           ; IF WE'RE DONE, FINISH UP
        CLR     (SP)+           ; CLEAN UP STACK
        BIT     #1,R4           ; CHECK THE NEGATE FLAG
        BEQ     P2              ; IF NOT SKIP, DON'T NEGATE
        NEG     R1              ; NEGATE
P2:
        MOV     -4(R2),(R2)     ; MOVE PREVIOUS VALUE INTO NEW VALUE
        ADD     R1,(R2)+        ; ADD PARSED VALUE TO NEW VALUE
        MOV     R3,-(SP)        ; STREAM = R3
        JSR     PC,FGETC        ; FGETC(R3)
        CLR     (SP)+           ; CLEAN UP STACK
        CMP     #',,R0          ; IS IT A COMMA?
        BEQ     P0              ; IF SO, MOVE TO NEXT VALUE
        CLR     -(SP)           ; PUSH JUNK WORD TO STACK FOR CLEANUP
PDONE:
        CLR     (SP)+           ; CLEAN UP STACK FROM LAST P10U32
        MOV     R2,R0           ; RETURN END ADDRESS
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

PATH1:
        .=.+2000
PATH2:
        .=.+2000

;
; LIBRARY CODE
;
; TODO: THIS CAN MOVE TO ITS OWN MODULE WHEN WE START TO USE PAL-11S
;       FOR NOW, IT IS COPIED INTO EACH PROGRAM
;

        .EVEN

;
; FU1610(VALUE, OUT)
;
; FORAMT AN UNSIGNED WORD TO DECIMAL, CALLING THE OUT SUBROUTINE
; FOR EACH DIGIT.
;
FU1610:  MOV    R2,-(SP)        ; SAVE R2
         MOV    R3,-(SP)        ; SAVE R3
         MOV    R4,-(SP)        ; SAVE R4
         MOV    10(SP),R0       ; R0 <- VALUE
         MOV    12(SP),R3       ; R3 <- OUT SUBROUTINE
         CLR    R4              ; R4 <- COUNTER (0)

F1:      MOV    #12,-(SP)       ; PUSH DIVISOR (10D)
         MOV    R0,-(SP)        ; PUSH DIVIDEND (VALUE)
         JSR    PC,DIVU16       ; DIVU16(VALUE, 10D)
         ADD    #4,SP           ; CLEAN UP STACK
         ADD    #60,R1          ; CONVERT REMAINDER TO CHAR
         MOVB   R1,-(SP)        ; PUSH DIGIT TO STACK
         INC    R4              ; INCREMENT THE COUNTER
         TST    R0              ; CHECK THE QUOTIENT
         BNE    F1              ; IF NOT ZERO, MOVE TO NEXT DIGIT

F2:      JSR    PC,(R3)         ; OUT(CHAR) CHAR ALREADY ON STACK
         TSTB   (SP)+           ; POP CHAR TO NOWHERE
         DEC    R4              ; DECREMENT THE COUNTER
         BNE    F2              ; MOVE TO NEXT DIGIT

         MOV    10(SP),R0       ; RETURN ORIGINAL VALUE
         MOV    (SP)+,R4        ; RESTORE R4
         MOV    (SP)+,R3        ; RESTORE R3
         MOV    (SP)+,R2        ; RESTORE R2
         RTS    PC              ; RETURN TO CALLER

;
; FU3210(VALUE HI, VALUE LO, STREAM)
;
; FORAMT AN UNSIGNED DOUBLE WORD TO DECIMAL, CALLING THE OUT SUBROUTINE
; FOR EACH DIGIT.
;
FU3210:
        MOV     R0,-(SP)        ; SAVE R0
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4

        SUB     #10,SP          ; SPACE FOR RESULT
        SUB     #12,SP          ; SPACE FOR OUTPUT BUFFER

        MOV     36(SP),R0       ; R0 <- VALUE HI
        MOV     40(SP),R1       ; R1 <- VALUE LO
        MOV     SP,R2           ; R2 <- RESULT ADDRESS
        ADD     #12,R2          ;    "
        MOV     SP,R3           ; R3 <- BUFFER
        CLR     R4              ; R4 <- COUNTER

FF1:    MOV     R2,-(SP)        ; PUSH RESULT ADDRESS
        MOV     #12,-(SP)       ; PUSH DIVISOR LO 10(10)
        CLR     -(SP)           ; PUSH DIVISOR HI  0
        MOV     R1,-(SP)        ; PUSH DIVIDEND LO
        MOV     R0,-(SP)        ; PUSH DIVIDEND HI
        JSR     PC,DIVU32       ; DIVIDE
        ADD     #12,SP          ; CLEAN UP STACK
        MOV     12(SP),R0       ; STORE QUOTIENT HI IN R0
        MOV     14(SP),R1       ; STORE QUOTIENT LO IN R1

        ADD     #60,20(SP)      ; CONVERT REMAINDER TO DECIMAL DIGIT
        MOVB    20(SP),(R3)+    ; PUSH CHARACTER TO BUFFER
        INC     R4              ; INCREMENT COUNTER
        TST     R1              ; IS QUOTIENT LO ZERO?
        BNE     FF1             ; NO, REPEAT
        TST     R0              ; IS QUOTIENT HI ZERO?
        BNE     FF1             ; NO, REPEAT

FF2:
        MOV     42(SP),-(SP)    ; STREAM
        MOVB    -(R3),-(SP)     ; PUSH CHAR
        JSR     PC,FPUTC        ; FPUTC(C, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK
        DEC     R4              ; DECREMENT COUNTER
        BNE     FF2             ; IF NOT DONE, NEXT CHAR

        ADD     #12,SP          ; RELENQUISH BUFFER SPACE
        ADD     #10,SP          ; RELENQUISH RESULT SPACE
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        MOV     (SP)+,R0        ; RESTORE R0
        RTS     PC              ; RETURN TO CALLER

; P10U32(STREAM) -> R0: HI, R1: LO
;
; PARSE A 32 BIT VALUE FROM DECIMAL STRING FROM THE STREAM
P10U32: MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5
        MOV     12(SP),R5       ; R5 <- IN

        CLR     R0              ; CLEAR R0
        CLR     R1              ; CLEAR R1
        CLR     R2              ; CLEAR HI RESULT
        CLR     R3              ; CLEAR LO RESULT

P101:   MOV     R5,-(SP)        ; STREAM = R5
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
        TST     R0              ; WAS EOF RETURNED?
        BPL     P104            ; NO, CONTINUE
        SEC                     ; SET THE CARRY (ERROR) FLAG
        BR      P102            ; DONE
P104:   MOV     R0,R4           ; STASH BYTE IN R4
        CMP     R0,#60          ; IS IT LESS THAN '0'?
        BMI     P103            ;   YES, DONE
        CMP     #71,R0          ; IS IT GREATER THAN '9'?
        BMI     P103            ;   YES, DONE
        SUB     #60,R4          ; CONVERT ASCII TO INT

        ; THIS SECTION IMPLEMENTS R2R3 = R2R3 * 10D + R4
        MOV     R4,-(SP)        ; STASH THE NEW DIGIT
        MOV     R3,-(SP)        ; PUSH LO RESULT
        MOV     #12,-(SP)       ; PUSH 10D
        JSR     PC,MULU16       ; MULU16(LO,10D) -> R0R1
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R3           ; LO RESULT = LO(LO* 10D)
        MOV     R0,R4           ; CARRY = HI(LO * 10D)

        MOV     R2,-(SP)        ; PUSH HI RESULT
        MOV     #12,-(SP)       ; PUSH 10D
        JSR     PC,MULU16       ; MULU16(HI,10D) -> R0R1
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R2           ; HI RESULT = LO(HI * 10D)
        ADD     R4,R2           ; HI RESULT += CARRY

        MOV     (SP)+,R4        ; RESTORE NEW DIGIT TO R4
        ADD     R4,R3           ; ADD IT TO LO RESULT
        ADC     R2              ; ADD ANY CARRY TO HI (PROB. NOT USED)

        BR      P101            ; NEXT DIGIT

P103:   MOV     R5,-(SP)        ; STREAM = R5
        MOV     R0,-(SP)        ; C = R0
        JSR     PC,UNGETC       ; UNGETC(C, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK
        CLC                     ; CLEAR ERROR INDICATOR
P102:   MOV     R2,R0           ; HI RESULT <- R2
        MOV     R3,R1           ; LO RESULT <- R3
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; UNISTD
;

; ssize_t read(int fildes, void *buf, size_t nbyte);
;
; READ FROM A FILE
;
READ:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2

        MOV     6(SP),R1        ; R1 <- FILEDES
        ASL     R1              ; MULTIPLY BY 2
        MOV     FDTABL(R1),R2   ; R2 <- FDTABL ENTRY
        MOV     (R2),R2         ; R2 <- DEVICE READ

        MOV     12(SP),-(SP)    ; PUSH NBYTE
        MOV     12(SP),-(SP)    ; PUSH BUF
        MOV     R1,-(SP)        ; PUSH FILEDES
        JSR     PC,(R2)         ; CALL DEVICE READ
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

; ssize_t write(int fildes, const void *buf, size_t nbyte);
;
; WRITE ON A FILE
;
WRITE:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2

        MOV     6(SP),R1        ; R1 <- FILEDES
        ASL     R1              ; MULTIPLY BY 2
        MOV     FDTABL(R1),R2   ; R2 <- FDTABL ENTRY
        MOV     2(R2),R2        ; R2 <- DEVICE WRITE

        MOV     12(SP),-(SP)    ; PUSH NBYTE
        MOV     12(SP),-(SP)    ; PUSH BUF
        MOV     R1,-(SP)        ; PUSH FILEDES
        JSR     PC,(R2)         ; CALL DEVICE WRITE
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; STDIO
;

; int fputc(int c, FILE *stream);
;
; PUT A BYTE ON A STREAM
;
FPUTC:
        MOV     SP,R0           ; R0 <- SP
        ADD     #2,R0           ; R0 <- LOCATION OF C

        MOV     #1,-(SP)        ; NBYTE = 1
        MOV     R0,-(SP)        ; BUF = LOCATION OF C
        MOV     @10(SP),-(SP)   ; FD = stream->fd
        JSR     PC,WRITE        ; WRITE(FD, BUF, NBYTE)
        ADD     #6,SP           ; CLEAN UP STACK

        RTS     PC              ; RETURN TO CALLER

; int putchar(int c);
;
; PUT A BYTE ON A STDOUT STREAM
;
PUTCHR:
        MOV     #STDOUT,-(SP)  ; STREAM = STDOUT
        MOV     4(SP),-(SP)    ; C = C
        JSR     PC,FPUTC       ; FPUTC(C, STREAM)
        ADD     #4,SP          ; CLEAN UP STACK
        RTS     PC             ; RETURN TO CALLER

; int fgetc(FILE *stream);
; int getc(FILE *stream);
;
; GET A BYTE FROM A STREAM
;
FGETC:
GETC:
        MOV     2(SP),R0        ; R0 <- STREAM
        ADD     #2,R0           ; R0 <- UNGETC BUFFER
        TST     (R0)            ; SET STATUS FROM UNGETC BUFFER
        BPL     FGETC1          ; IF EMPTY, GET FROM UNDERLYING FILE
        BIC     #100000,(R0)    ; CLEAR THE UNGETC BUFFER FULL BIT
        MOV     (R0),R0         ; RETURN THE BYTE FROM THE UNGETC BUF
        BR      FGETC9          ; WE'RE DONE

FGETC1: CLR     -(SP)           ; SPACE FOR BUFFER
        MOV     SP,R0           ; R0 <- LOCATION OF BUFFER

        MOV     #1,-(SP)        ; NBYTE = 1
        MOV     R0,-(SP)        ; BUF = LOCATION OF BUFFER
        MOV     @10(SP),-(SP)   ; FD = stream->fd
        JSR     PC,READ         ; READ(FD, BUF, NBYTE)
        ADD     #6,SP           ; CLEAN UP STACK
        TST     R0              ; IS R0 ZERO?
        BNE     FGETC8          ; NO, SKIP
        MOV     #-1,(SP)        ; RETURN EOF
FGETC8: MOV     (SP)+,R0        ; COPY BUFFER TO R0
FGETC9: RTS     PC              ; RETURN TO CALLER

; int ungetc(int c, FILE *stream);
;
; PUSH BYTE BACK INTO INPUT STREAM
;
UNGETC:
        MOV     4(SP),R0        ; R0 <- STREAM
        ADD     #2,R0           ; R0 <- UNGETC BUFFER
        TST     (R0)            ; SET STATUS FROM BUFFER
        BMI     UNGET1          ; BUFFER IS FULL, RETURN
        MOV     2(SP),(R0)      ; SAVE THE BYTE TO THE UNGETC BUFFER
        BIS     #100000,(R0)    ; SET THE UNGETC BUFFER FULL BIT
        MOV     2(SP),R0        ; RETURN THE PUSHED BYTE
        BR      UNGET9          ; WE'RE DONE
UNGET1: MOV     #-1,R0          ; RETURN -1
UNGET9: RTS     PC              ; RETURN TO CALLER

; int fputs(const char *restrict s, FILE *restrict stream);
;
; PUT A STRING ON A STREAM
;
FPUTS:
        MOV     2(SP),R0        ; R0 <- S
        TSTB    (R0)+           ; IS (R0) ZERO?
        BNE     .-2             ; NO, TRY NEXT BYTE
        SUB     2(SP),R0        ; R0 -= S

        MOV     R0,-(SP)        ; NBYTE = R0
        MOV     4(SP),-(SP)     ; BUF = S
        MOV     @10(SP),-(SP)   ; FILEDES = STREAM->fd
        JSR     PC,WRITE        ; WRITE(FILEDES, BUF, NBYTE)
        ADD     #6,SP           ; CLEAN UP STACK
        CLR     R0              ; RETURN NON-NEGATIVE
        RTS     PC              ; RETURN TO CALLER


;
; KL11 TELETYPE DRIVER
;
        TKS=    177560          ; TELETYPE KEYBOARD STATUS
        TKB=    177562          ; TELETYPE KEYBOARD BUFFER
        TPS=    177564          ; TELEPRINTER STATUS WORD
        TPB=    177566          ; TELEPRINTER BUFFER

; ssize_t read(int fildes, void *buf, size_t nbyte);
;
; READ FROM A KL11 TELETYPE CONTROLLER
;
TTIRD:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
                                ; STACK:
                                ;  0: R2
                                ;  2: R1
                                ;  4: RETURN ADDRESS
                                ;  6: FILEDES
                                ; 10: BUF
                                ; 12: NBYTE
        MOV     12(SP),R1       ; R1 <- NBYTE
        MOV     10(SP),R2       ; R2 <- BUF
        CLR     R0              ; R0 <- BYTES READ
        TST     R1              ; IS NBYTE ZERO?
TTIRD1: BEQ     TTIRD9          ; YES, WE'RE DONE
        BIS     #1,TKS          ; SET RDR ENB
        TSTB    TKS             ; IS DONE SET?
        BPL     .-4             ; NO, TRY AGAIN
        MOVB    TKB,(R2)        ; COPY TO BUF
        ; TODO: IOCTL OR TCSETATTR TO CONTROL ECHO
        TSTB    TPS             ; IS TELEPRINTER READY?
        BPL     .-4             ; NO, TRY AGAIN
        MOVB    (R2)+,TPB       ; ECHO TO TELEPRINTER
        INC     R0              ; INCREMENT READ BYTE COUNT
        DEC     R1              ; DECREMENT COUNT OF REMAINING BYTES
        BR      TTIRD1          ; NEXT BYTE
TTIRD9:
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

; ssize_t write(int fildes, const void *buf, size_t nbyte);
;
; WRITE ON A Kl11 TELETYPE CONTROLLER
;
TTOWR:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
                                ; STACK:
                                ;  0: R2
                                ;  2: R1
                                ;  4: RETURN ADDRESS
                                ;  6: FILEDES
                                ; 10: BUF
                                ; 12: NBYTE
        CLR     R0              ; R0 <- BYTES READ (0)
        MOV     12(SP),R1       ; R1 <- NBYTE
        MOV     10(SP),R2       ; R2 <- BUF

        TST     R1              ; IS NBYTE ZERO?
TTOWR1: BEQ     TTOWR9          ; IF SO, WE'RE DONE
        TSTB    TPS             ; IS TELEPRINTER READY?
        BPL     .-4             ; NO, TRY AGAIN
        MOVB    (R2)+,TPB       ; WRITE BYTE TO TELEPRINTER
        INC     R0              ; INCREMENT BYTE READ COUNT
        DEC     R1              ; DECREMENT COUNT OF REMAINING BYTES
        BR      TTOWR1          ; NEXT BYTE

TTOWR9: MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; PC11 HIGH-SPEED PAPER TAPE READER/PUNCH DRIVER
;
        PRS=    177550          ; PAPER TAPE READER STATUS WORD
        PRB=    177552          ; PAPER TAPE READER BUFFER
        PPS=    177554          ; PAPER TAPE PUNCH STATUS WORD
        PPB=    177556          ; PAPER TAPE PUNCH BUFFER

; ssize_t read(int fildes, void *buf, size_t nbyte);
;
; READ FROM A PC11 PAPER TAPE READER CONTROLLER
;
PTRRD:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2

        MOV     12(SP),R1       ; R1 <- NBYTE
        MOV     10(SP),R2       ; R2 <- BUFFER
        CLR     R0              ; R0 <- COUNT OF BYTES READ (0)

        TST     R1              ; IS R1 ZERO?
PTRRD1: BEQ     PTRRD9          ; IF SO, WE'RE DONE
        BIS     #1,PRS          ; SET RDR ENB
        BIT     #100200,PRS     ; CHECK FOR ERROR OR DONE
        BEQ     .-6             ; IF NIETHER, TRY AGAIN
        BMI     PTRRD9          ; IF ERROR, WE'RE DONE
        MOVB    PRB,(R2)+       ; READ BYTE INTO BUFFER
        INC     R0              ; INCREMENT BYTES READ COUNT
        DEC     R1              ; DECREMENT BYTES REMAINING COUNT
        BR      PTRRD1          ; NEXT BYTE

PTRRD9: MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER


; ssize_t write(int fildes, void *buf, size_t nbyte);
;
; WRITE ON A PC11 PAPER TAPE PUNCH CONTROLLER
;
PTPWR:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2

        MOV     12(SP),R1       ; R1 <- NBYTE
        MOV     10(SP),R2       ; R2 <- BUFFER
        CLR     R0              ; R0 <- COUNT OF BYTES READ (0)

        TST     R1              ; IS R1 ZERO?
PTPWR1: BEQ     PTPWR9          ; IF SO, WE'RE DONE
        BIT     #100200,PPS     ; CHECK FOR ERROR OR READY
        BEQ     .-6             ; IF NEITHER, TRY AGAIN
        BMI     PTPWR9          ; IF ERROR, WE'RE DONE
        MOVB    (R2)+,PPB       ; WRITE BYTE TO PUNCH
        INC     R0              ; INCREMENT BYTES READ COUNT
        DEC     R1              ; DECREMENT BYTES REMAINING COUNT
        BR      PTPWR1          ; NEXT BYTE

PTPWR9: MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER
;
; NULL DEVICE DRIVER
;
; ssize_t read(int fildes, void *buf, size_t nbyte);
; ssize_t write(int fildes, const void *buf, size_t nbyte);
;
; READ FROM A NULL STREAM
; WRITE ON A NULL STREAM
;
NULRD:
NULWR:
        CLR     R0              ; NO BYTES READ OR WRITTEN
        RTS     PC              ; RETURN TO CALLER


; FILE DESCRIPTOR TABLE
FDTABL:
        .WORD   TTI             ; FD 0: TTY IN
        .WORD   TTO             ; FD 1: TTY OUT
        .WORD   TTO             ; FD 2: ERRORS -> TTY OUT
        .WORD   PTR             ; FD 3: PTR IN
        .WORD   PTP             ; FD 4: PTP OUT
        .WORD   0               ; END OF TABLE

; FILE DESCRIPTOR TABLE ENTRY STRUCTURE
; 0: READ SUBROUTINE
; 2: WRITE SUBROUTINE
; 4: UNIT

TTI:
        .WORD   TTIRD
        .WORD   NULWR
        .WORD   0

TTO:
        .WORD   NULRD
        .WORD   TTOWR
        .WORD   0

PTR:
        .WORD   PTRRD
        .WORD   NULWR
        .WORD   0

PTP:    .WORD   NULRD
        .WORD   PTPWR
        .WORD   0

;
; OPEN STREAMS
;
; FILE STREAM STRUCTURE
;  0: FD
;  2: UNGETC BUFFER

STDIN:  .WORD   0
        .WORD   0
STDOUT: .WORD   1
        .WORD   0
STDERR: .WORD   2
        .WORD   0
PTIN:   .WORD   3
        .WORD   0
PTOUT:  .WORD   4
        .WORD   0


;
; MATH
;

; MULU16(MULTIPLICAND, MULTIPLIER) -> R0: HI, R1: LO
;
; UNSIGNED 16-BIT MULTIPLICATION
;

MULU16: CLR     R0              ; CLEAR RESULT HI
        CLR     R1              ; CLEAR RESULT LO

        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     10(SP),R2       ; R2 <- MULTIPLICAND
        MOV     12(SP),R3       ; R3 <- MULTIPLIER
        MOV     #20,R4          ; R4 <- COUNTER (16D)

M0:     ASL     R1              ; ROTATE LO RESULT LEFT
        ROL     R0              ;    AND HI
        ROL     R3              ; ROTATE MULTIPLIER LEFT
        BCC     M1              ; IF THE MSB WAS CLEAR, SKIP ADD
        ADD     R2,R1           ; ADD MULTIPLICAND TO LO RESULT
        ADC     R0              ;   AND HI
M1:     DEC     R4              ; DECREMENT THE COUNTER
        BNE     M0              ; IF NOT ZERO, REPEAT

        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; MUL32P(M'CAND HI, M'CAND LO, MULTIPLIER HI, MULTIPLIER LO) ->
;   R0: HI(LO(PRODUCT)), R1: LO(LO(PRODUCT))
;
; RETURN LOW 32 BITS OF A 32 BIT TIMES 32 BIT PARTIAL PRODUCT
;
; R1 = LO(LO(A) * LO(B))
; R0 = HI(LO(A) * LO(B)) + LO(LO(A) * HI(B)) + LO (HI(A) * LO(B))
MUL32P:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV    10(SP),-(SP)     ; PUSH LO(A): MULTIPLICAND LO
        MOV    16(SP),-(SP)     ; PUSH LO(B): MULTIPLIER LO
        JSR    PC,MULU16        ; MULTIPLY LO(A) * LO(B)
        MOV    R1,R3            ; R3 <- LO(LO(A) * LO(B))
        MOV    R0,R2            ; R2 <- HI(LO(A) * LO(B))

        MOV    16(SP),(SP)      ; HI(B): MULTIPLIER HI
        JSR    PC,MULU16        ; MULTIPLY LO(A) * HI(B)
        ADD    R1,R2            ; R2 += LO(LO(A) * HI(B))

        MOV    12(SP),(SP)      ; HI(A): MULTIPLICAND HI
        MOV    20(SP),2(SP)     ; LO(B): MULTIPLIER LO
        JSR    PC,MULU16        ; MULTIPLY HI(A) * LO(B)
        ADD    R1,R2            ; R2 += LO(HI(A) * LO(B))
        ADD    #4,SP            ; CLEAN UP STACK

        MOV    R2,R0            ; RESULT HI
        MOV    R3,R1            ; RESULT LO

        MOV    (SP)+,R3         ; RESTORE R3
        MOV    (SP)+,R2         ; RESTORE R2
        RTS    PC               ; RETURN TO CALLER

; DIVU16(DIVIDEND, DIVISOR) -> R0: QUOTIENT, R1: REMAINDER
;
; UNSIGNED 16-BIT DIVISION
;
DIVU16:
        TST     4(SP)           ; CHECK THE DIVISOR
        BNE     DD1             ; IF NOT ZERO, CONTINUE
        SEV                     ; SET OVERFLOW (ERROR)
        RTS     PC              ; RETURN TO CALLER
DD1:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4

        CLR     R0              ; R0 <- QUOTIENT
        CLR     R1              ; R1 <- REMAINDER
        MOV     10(SP),R2       ; R2 <- DIVIDEND
        MOV     12(SP),R3       ; R3 <- DIVISOR
        MOV     #20,R4          ; R4 <- COUNTER
DD2:
        ASL     R0              ; SHIFT QUOTIENT LEFT
        ASL     R2              ; SHIFT DIVIDEND LEFT
        ROL     R1              ; ROTATE REMAINDER LEFT, WITH CARRY
        CMP     R1,R3           ; IS DIVISOR <= REMAINDER?
        BMI     DD3             ; NO, CONTINUE
        SUB     R3,R1           ; REMAINDER -= DIVISOR
        BIS     #1,R0           ; SET LOW BIT IN QUOTIENT
DD3:
        DEC     R4              ; DEC COUNTER
        BNE     DD2             ; IF NOT ZERO, REPEAT

        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        CLV                     ; INDICATE NO ERROR
        RTS     PC              ; RETURN TO CALLER

; DIVU32(DIVIDEND HI, DIVIDEND LO, DIVISOR HI, DIVISOR LO, RESULT)
; (RESULT) -> QUOTIENT HI, QUOTIENT LO, REMAINDER HI, REMAINDER LO
;
; UNSIGNED 32-BIT DIVISION
;
DIVU32:
        TST     10(SP)          ; CHECK DIVISOR LO
        BNE     DA1             ; IF NOT ZERO, CONTINUE
        TST     6(SP)           ; CHECK DIVISOR HI
        BNE     DA1             ; IF NOT ZERO, CONTINUE
        SEV                     ; SET OVERFLOW (ERROR)
        RTS     PC              ; RETURN TO CALLER
DA1:
        MOV     R0,-(SP)        ; SAVE R0
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4

        MOV     22(SP),R0       ; R0 <- RESULT
        MOV     12(SP),R2       ; R2 <- DIVIDEND HI
        MOV     14(SP),R3       ; R3 <- DIVIDEND LO
        MOV     #40,R4          ; R4 <- COUNTER
        CLR     (R0)            ; CLEAR QUOTIENT HI
        CLR     2(R0)           ; CLEAR QOUTIENT LO
        CLR     4(R0)           ; CLEAR REMAINDER HI
        CLR     6(R0)           ; CLEAR REMAINDER LO
DA2:
        ASL     2(R0)           ; SHIFT QUOTIENT LO LEFT
        ROL     (R0)            ; ROTATE QUOTIENT HI LEFT WITH CARRY
        ASL     R3              ; SHIFT DIVIDEND LO LEFT
        ROL     R2              ; ROTATE DIVIDEND HI LEFT WITH CARRY
        ROL     6(R0)           ; ROTATE REMAINDER LO LEFT WITH CARRY
        ROL     4(R0)           ; ROTATE REMAINDER HI LEFT WITH CARRY
        CMP     4(R0),16(SP)    ; COMPARE REMAINDER HI AND DIVISOR HI
        BMI     DA3             ; IF DIVISOR HI > REMAINDER HI, CONT
        BNE     DA4
        CMP     6(R0),20(SP)    ; COMPARE REMAINDER LO AND DIVISOR LO
        BMI     DA3             ; IF DIVISOR LO > REMAINDER LO, CONT
DA4:    SUB     20(SP),6(R0)    ; REMAINDER LO -= DIVISOR LO
        SBC     4(R0)           ; SUBTRACT CARRY FROM DIVISOR HI
        SUB     16(SP),4(R0)    ; REMAINDER HI -= DIVISOR HI
        BIS     #1,2(R0)        ; SET LOW BIT IN QUOTIENT
DA3:
        DEC     R4              ; DECREMENT COUNTER
        BNE     DA2             ; IF NOT ZERO, REPEAT

        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R0        ; RESTORE R0
        CLV                     ; CLEAR ERROR FLAG
        RTS     PC              ; RETURN TO CALLER

        .END
