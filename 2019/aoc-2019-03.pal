; ADVENT OF CODE: DAY 3
; CROSSED WIRES

; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER
        PRS=    177550          ; HIGH SPEED PAPER TAPE READER STATUS
        PRB=    177552          ; HIGH SPEED PAPER TAPE READER BUFFER
        TPS=    177564          ; TELEPRINTER STATUS WORD
        TPB=    177566          ; TELEPRINTER BUFFER


;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        HALT                    ; PROGRAM COMPLETE
        BR      START           ; RESTART ON CONTINUE

;
; PARSE(ADDRESS,IN) R0: ADDRESS END
;
; PARSE A PATH INTO THE GIVEN ADDRESS
;
; DATA IS STORED AS A SERIES OF X AND Y VALUES.
; EXAMPLE: R75,D30,R83,U83,L12 IS STORED AS 75,-30,158,53,146 (10).
PARSE:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5
        MOV     12(SP),R5       ; R5 <- IN SUBROUTINE
        MOV     10(SP),R4       ; R4 <- ADDRESS
        CLR     R2              ; R3 <- LAST LOCATION VALUE
        MOV     #4,R2           ; R2 <- FLAGS
                                ;       BIT 0: NEGATIVE
                                ;       BIT 1: VERTICAL
                                ;       BIT 2: FIRST COORDINATE

P0:     JSR     PC,(R5)         ; CALL IN ROUTINE
        BCS     P1              ; IF ERROR, DONE
        TST     R0              ; CHECK RETURNED BYTE
        BEQ     P0              ; SKIP NUL BYTES
        CMP     #122,R0         ; IS IT 'R'?
        BNE     PNR             ; NO, SKIP
        BIC     #3,R2           ; CLEAR THE NEGATIVE AND VERTICAL FLAGS
        BR      P2              ; CONTINUE PARSING
PNR:    CMP     #125,R0         ; IS IT 'U'?
        BNE     PNU             ; NO, SKIP
        BIC     #1,R2           ; CLEAR THE NEGATIVE FLAG
        BIS     #2,R2           ; SET THE VERTICAL FLAG
        BR      P2              ; CONTINUE PARSING
PNU:    CMP     #114,R0         ; IS IT 'L'?
        BNE     PNL             ; NO, SKIP
        BIS     #1,R2           ; SET THE NEGATIVE FLAG
        BIC     #2,R2           ; CLEAR THE VERTICAL FLAG
        BR      P2              ; CONTINUE PARSING
PNL:    CMP     #104,R0         ; IS IT 'D'?
        BNE     PERROR          ; NO, HALT
        BIS     #3,R2           ; SET THE NEGATIVE AND VERTICAL FLAGS
        BR      P2              ; CONTINUE PARSING
PERROR: HALT                    ; BAD INPUT, HALT.

P2:     BIT     #5,R2           ; IS THIS THE 1ST COORDINATE AND VERT?
        BNE     P4              ; IF NOT, CONTINUE
        CLR     (R4)+           ; IF SO, THE FIRST X IS ZERO
P4:     MOV     R5,-(SP)        ; PUSH IN SUBROUTINE
        JSR     PC,P10U32       ; PARSE DIGITS
        CLR     (SP)+           ; CLEAN UP STACK
        BIT     #1,R2           ; IS VALUE NEGATIVE?
        BNE     P3              ; NO, DON'T NEGATE
        NEG     R1              ; NEGATE VALUE
P3:
        ; TODO: ADD THE PREVIOUS X OR Y COORINATE.
        MOV     R1,(R4)+        ; STORE COORDINATE
        BIC     #4,R2           ; CLEAR THE FIRST COORDINATE FLAG
        BR      P0              ; NEXT VALUE

P1:     MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; LIBRARY CODE
;
; TODO: THIS CAN MOVE TO ITS OWN MODULE WHEN WE START TO USE PAL-11S
;       FOR NOW, IT IS COPIED INTO EACH PROGRAM
;

        .EVEN
;
; GETC() -> R0L: THE BYTE READ.  SETS CARRY ON ERROR.
;
; GET A BYTE FROM THE HIGH SPEED PAPER TAPE
GETC: INC PRS                   ; SET PRS ENABLE
GC1:  BIT       #100200,PRS     ; IS BYTE AVAILABLE OR ERROR?
      BEQ       GC1             ; IF NOT, KEEP TRYING
      BMI       GC2             ; IF ERROR, DONE
      MOVB      PRB,R0          ; PUT BYTE INTO R0
      CLC                       ; CLEAR CARRY (ERROR) FLAG
      RTS       PC              ; RETURN TO CALLER
GC2:  SEC                       ; SET CARRY (ERROR) FLAG
      RTS       PC              ; RETURN TO CALLER

;
;
; MULU16(MULTIPLICAND, MULTIPLIER) -> R0: HI, R1: LO
;
; UNSIGNED 16-BIT MULTIPLICATION
;

MULU16: CLR     R0              ; CLEAR RESULT HI
        CLR     R1              ; CLEAR RESULT LO

        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     10(SP),R2       ; R2 <- MULTIPLICAND
        MOV     12(SP),R3       ; R3 <- MULTIPLIER
        MOV     #20,R4          ; R4 <- COUNTER (16D)

M0:     ASL     R1              ; ROTATE LO RESULT LEFT
        ROL     R0              ;    AND HI
        ROL     R3              ; ROTATE MULTIPLIER LEFT
        BCC     M1              ; IF THE MSB WAS CLEAR, SKIP ADD
        ADD     R2,R1           ; ADD MULTIPLICAND TO LO RESULT
        ADC     R0              ;   AND HI
M1:     DEC     R4              ; DECREMENT THE COUNTER
        BNE     M0              ; IF NOT ZERO, REPEAT

        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

; P10U32(IN) -> R0: HI, R1: LO
;
; PARSE A 32 BIT VALUE FROM DECIMAL STRING, USING THE IN SUBROUTINE.
; CONSUMES THE FIRST NON-DECIMAL-DIGIT AFTER THE NUMBER
P10U32: MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5
        MOV     12(SP),R5       ; R5 <- IN

        CLR     R0              ; CLEAR R0
        CLR     R1              ; CLEAR R1
        CLR     R2              ; CLEAR HI RESULT
        CLR     R3              ; CLEAR LO RESULT

P101:   JSR     PC,(R5)         ; CALL IN SUBRUTINE
        MOV     R0,R4           ; STASH BYTE IN R4
        BCS     P102            ; IF ERROR, DONE
        CMP     R0,#60          ; IS IT LESS THAN '0'?
        BMI     P103            ;   YES, DONE
        CMP     #71,R0          ; IS IT GREATER THAN '9'?
        BMI     P103            ;   YES, DONE
        SUB     #60,R4          ; CONVERT ASCII TO INT

        ; THIS SECTION IMPLEMENTS R2R3 = R2R3 * 10D + R4
        MOV     R4,-(SP)        ; STASH THE NEW DIGIT
        MOV     R3,-(SP)        ; PUSH LO RESULT
        MOV     #12,-(SP)       ; PUSH 10D
        JSR     PC,MULU16       ; MULU16(LO,10D) -> R0R1
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R3           ; LO RESULT = LO(LO* 10D)
        MOV     R0,R4           ; CARRY = HI(LO * 10D)

        MOV     R2,-(SP)        ; PUSH HI RESULT
        MOV     #12,-(SP)       ; PUSH 10D
        JSR     PC,MULU16       ; MULU16(HI,10D) -> R0R1
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R2           ; HI RESULT = LO(HI * 10D)
        ADD     R4,R2           ; HI RESULT += CARRY

        MOV     (SP)+,R4        ; RESTORE NEW DIGIT TO R4
        ADD     R4,R3           ; ADD IT TO LO RESULT
        ADC     R2              ; ADD ANY CARRY TO HI (PROB. NOT USED)

        BR      P101            ; NEXT DIGIT

P103:   CLC                     ; CLEAR ERROR INDICATOR
P102:   MOV     R2,R0           ; HI RESULT <- R2
        MOV     R3,R1           ; LO RESULT <- R3
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER


        .END
