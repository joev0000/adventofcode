; ADVENT OF CODE: DAY 3
; CROSSED WIRES

; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        MOV     SP,R0           ; STASH STACK POINTER
        SUB     #32,SP          ; LOCALS
                                ; 30(SP): HI(PATH2 LENGTH)
                                ; 26(SP): LO(PATH2 LENGTH)
                                ; 24(SP): HI(PATH1 LENGTH)
                                ; 22(SP): LO(PATH1 LENGTH)
                                ; 20(SP): HI(SHORTEST PATH LENGTH)
                                ; 16(SP): LO(SHORTEST PATH LENGTH)
                                ; 14(SP): LOWEST MANHATTAN DISTANCE
                                ; 12(SP): PATH2+2(R2)
                                ; 10(SP): PATH2-2(R2)
                                ;  6(SP): PATH1+2(R1)
                                ;  4(SP): PATH1-2(R1)
                                ;  2(SP): END OF PATH1
                                ;  0(SP): END OF PATH2

        CLR     -(R0)           ; INITIALIZE LOCAL
        CMP     SP,R0           ; GOT THEM ALL?
        BNE     .-4             ; NO, GO TO NEXT ONE

        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     #BANNER,-(SP)   ; S <- BANNER
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     #PTIN,-(SP)     ; PUSH PTIN STREAM
        MOV     #PATH1,-(SP)    ; PUSH PATH1
        JSR     PC,PARSE        ; PARSE THE PATH
        ADD     #4,SP           ; CLEAN UP STACK
        SUB     #PATH1,R0       ; R0 <- LENGTH OF PATH1
        SUB     #2,R0           ; POINT TO THE LAST ENTRY
        MOV     R0,2(SP)        ; SAVE THE LENGTH OF PATH1

        MOV     #PTIN,-(SP)     ; PUSH PTIN STREAM
        MOV     #PATH2,-(SP)    ; PUSH PATH2
        JSR     PC,PARSE        ; PARSE THE PATH
        ADD     #4,SP           ; CLEAN UP STACK
        SUB     #PATH2,R0       ; R0 <- LENGTH OF PATH2
        SUB     #2,R0           ; POINT TO THE LAST ENTRY
        MOV     R0,(SP)         ; SAVE THE LENGTH OF PATH2

        ; 0,x0,y0,x1,y1,x2,y2
        ;
        ; i1 = 1
        ; i2 = 2
        ;
        ; path1(i1-1) <= path2(i2) && path2(i2) <= path1(i1+1)
        ; path2(i2-1) <= path1(i1) && path1(i1) <= path2(i2+1)
        ;
        ; Check horizontals of PATH1 vs. verticals of PATH2
        ; Check verticals of PATH1 vs. horizontals of PATH2
        ; Compare lower value vs. higher value.

        MOV     #077777,14(SP)  ; 14(SP) <- SHORTEST MANHATTAN DISTANCE
        MOV     #177777,16(SP)  ; 16(SP) <- LO(SHORTEST PATH LENGTH)
        MOV     #077777,20(SP)  ; 20(SP) <- HI(SHORTEST PATH LENGTH)

        MOV     #2,R5           ; R5 <- PATH2 START OFFSET
        MOV     #2,R1           ; R1 <- INDEX IN PATH1
L1:
        CMP     R1,2(SP)        ; ARE WE AT THE END?
        BLT     L10             ; IF NOT, SKIP THE JUMP
        JMP     L9              ; IF SO, JUMP TO THE END
L10:
        ; LOAD PATH1 SEGMENT ENDS TO LOCALS
        MOV     PATH1-2(R1),4(SP)
        MOV     PATH1+2(R1),6(SP)

        CMP     4(SP),6(SP)     ; COMPARE PATH1-2 AND PATH1+2
        BLT     L5              ; IF SO, THEY ARE IN CORRECT ORDER
        MOV     4(SP),R0        ; IF NOT, SWAP THEM
        MOV     6(SP),4(SP)
        MOV     R0,6(SP)

L5:
        MOV     #2,R2           ; R2 <- INDEX IN PATH2
        ADD     R5,R2           ; ADD PATH2 START OFFSET
L2:
        CMP     R2,(SP)         ; ARE WE AT THE END OF PATH2?
        BGE     L3              ; IF SO, MOVE ON TO NEXT PATH1

        ; LOAD PATH2 SEGMENT ENDS TO LOCALS
        MOV     PATH2-2(R2),10(SP)
        MOV     PATH2+2(R2),12(SP)

        CMP     10(SP),12(SP)   ; COMPARE PATH2-2 AND PATH2+2
        BLT     L4              ; IF SO, THEY ARE IN CORRECT ORDER
        MOV     10(SP),R0       ; IF NOT, SWAP THEM
        MOV     12(SP),10(SP)
        MOV     R0,12(SP)
L4:
        CMP     4(SP),PATH2(R2) ; IS PATH1-2(R1) <= PATH2(R2)?
        BGT     L6              ; IF NOT, NO INTERSECTION
        CMP     PATH2(R2),6(SP) ; IS PATH2(R2) <= PATH1+2(R1)?
        BGT     L6              ; IF NOT, NO INTERSECTION
        CMP     10(SP),PATH1(R1); IS PATH2-2(R2) <= PATH1(R1)?
        BGT     L6              ; IF NOT, NO INTERSECTION
        CMP     PATH1(R1),12(SP); IS PATH1(R1) <= PATH2+2(R2)?
        BGT     L6              ; IF NOT, NO INTERSECTION

        TST     PATH1(R1)       ; IS PATH1(R1) ZERO?
        BNE     L7              ; IF NOT, CONTINUE
        TST     PATH2(R2)       ; IS PATH2(R2) ZERO?
        BEQ     L6              ; IF SO, WE'RE AT (0,0), SO NO MATCH
L7:
        ; WE HAVE A MATCH
        MOV     PATH1(R1),-(SP) ; PUSH FIRST COORD
        MOV     PATH2(R2),-(SP) ; PUSH SECOND COORD
        JSR     PC,DIST         ; DIST(X,Y)
        ADD     #4,SP           ; CLEAN UP STACK
        CMP     R0,14(SP)       ; IS DISTANCE LESS THAT LOWEST?
        BGT     L71             ; IF NOT, SKIP
        MOV     R0,14(SP)       ; WE HAVE A NEW LOWEST DISTANCE

L71:    ; CHECK TO SEE IF IT'S THE SHORTEST PATH
        MOV     26(SP),R3       ; R3 <- LO(PATH2 LENGTH)
        MOV     30(SP),R4       ; R4 <- HI(PATH2 LEGNTH)
        ADD     22(SP),R3       ; ADD LO(PATH1 LENGTH) TO R3
        ADC     R4              ; ADD ANY CARRY TO R4
        ADD     24(SP),R4       ; ADD HI(PATH1 LENGTH) TO R4

        ; ADD THE DISTANCE FROM THE LAST PATH2 VERTEX
        MOV     PATH1(R1),-(SP) ; X1 <- PATH1(R1)
        MOV     PATH2-2(R2),-(SP) ; X0 <- PATH2-2(R2)
        JSR     PC,ADIFF        ; ADIFF(X0, X1)
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R0,R3           ; ADD DISTANCE TO R3
        ADC     R4              ; ADD ANY CARRY TO R4

        ; ADD THE DISTANCE FROM THE LAST PATH1 VERTEX
        MOV     PATH2(R2),-(SP) ; X1 <- PATH2(R2)
        MOV     PATH1-2(R1),-(SP) ; X0 <- PATH1-2(R1)
        JSR     PC,ADIFF        ; ADIFF(X0, X1)
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R0,R3           ; ADD DISTANCE TO R3
        ADC     R4              ; ADD ANY CARRY TO R4

        CMP     R4,20(SP)       ; IS R4 > HI(SHORTEST PATH LENGTH)
        BHI     L6              ; IF SO, WE'RE NOT THE SHORTEST
        CMP     R3,16(SP)       ; IS R3 > LO(SHORTEST PATH LENGTH)
        BHI     L6              ; IF SO, WE'RE NOT THE SHORTEST
        MOV     R4,20(SP)       ; STORE THE NEW HI(SHORTEST PATH LEN)
        MOV     R3,16(SP)       ; STORE THE NEW LO(SHORTEST PATH LEN)

L6:     ; MOVE ON TO NEXT PATH2 ELEMENT
        SUB     10(SP),12(SP)   ; 12(SP) IS THE LENGTH OF THE SEGMENT
        ADD     12(SP),26(SP)   ; ADD SEG LENGTH TO LO(PATH2 LENGTH)
        ADC     30(SP)          ; ADD CARRY TO HI(PATH2 LENGTH)
        ADD     #2,R2

        MOV     PATH2-2(R2),-(SP) ; X1 <- PATH2-2(R2)
        MOV     PATH2+2(R2),-(SP) ; X0 <- PATH2+2(R2)
        JSR     PC,ADIFF        ; ADIFF(X0,X1)
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R0,26(SP)       ; ADD R0 TO LO(PATH2 LENGTH)
        ADC     30(SP)          ; ADD CARRY TO HI(PATH2 LENGTH)
        ADD     #2,R2           ; NEXT PARALLEL ELEMENT IN PATH2
        BR      L2              ; NEXT ELEMENT IN PATH2
L3:
        SUB     4(SP),6(SP)     ; 6(SP) IS THE SEGMENT LENGTH
        ADD     6(SP),22(SP)    ; ADD SEG LENGTH TO LO(PATH1 LENGTH)
        ADC     24(SP)          ; ADD CARRY TO HI(PATH1 LENGTH)
        CLR     26(SP)          ; CLEAR LO(PATH2 LENGTH)
        CLR     30(SP)          ; CLEAR HI(PATH2 LENGTH)
        ADD     #2,R1           ; INCREMENT PATH1 INDEX
        NEG     R5              ; TOGGLE PATH2 START OFFSET
        ADD     #2,R5           ;   USING R5 = 2 - R5
        JMP     L1              ; NEXT ELEMENT IN PATH1
L9:
        MOV     14(SP),-(SP)    ; ARG0 <- LOWEST MANHATTAN DISTANCE

        MOV     #PART1,-(SP)    ; FORMAT <- PART1
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT, ...)
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     16(SP),-(SP)    ; ARG0 <- HI(LOWEST PATH LENGTH)
        MOV     22(SP),-(SP)    ; ARG1 <- LO(LOWEST PATH LENGTH)
        MOV     #PART2,-(SP)    ; FORMAT <- PART2
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT, ...)
        ADD     #6,SP           ; CLEAN UP STACK
        ADD     #32,SP          ; CLEAN UP LOCALS
        HALT                    ; PROGRAM COMPLETE
        JMP     START           ; RESTART ON CONTINUE

COORDS:
       .ASCII  /(%i,%i)/
       .BYTE 15,12,0
BANNER: .ASCII  /ADVENT OF CODE 2019 DAY 3/
        .BYTE   15,12,0
PART1:  .ASCII  /PART 1: %u/
        .BYTE   15,12,0
PART2:  .ASCII  /PART 2: %lu/
        .BYTE   15,12,0

        .EVEN
;
; PARSE(ADDRESS, STREAM) R0: ADDRESS END
;
; PARSE A PATH INTO THE GIVEN ADDRESS
;
; DATA IS STORED AS A SERIES OF X AND Y VALUES.
; EXAMPLE: R75,D30,R83,U83,L12 IS STORED AS 75,-30,158,53,146 (10).
PARSE:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4

        MOV     10(SP),R2       ; R2 <- ADDRESS
        MOV     12(SP),R3       ; R3 <- STREAM

        CLR     (R2)+           ; ADD LEADING ZERO
        CLR     (R2)+           ; CLEAR THE FIRST COORDINATE
        MOV     R3,-(SP)        ; STREAM = R3
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
        CMP     #'U,R0          ; IS IT U?
        BEQ     PDU1            ; YES, HANDLE VERTICAL FIRST
        CMP     #'D,R0          ; IS IT D?
        BEQ     PDU1            ; YES, HANDLE VERITICAL FIRST
        BR      P1              ; NO, CONTINUE
PDU1:   CLR     (R2)+           ; FIRST HORIZONTAL IS ZERO
        BR      P1              ; PARSE NUMBER

P0:
        MOV     R3,-(SP)        ; STREAM = R3
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
P1:
        CMP     #'D,R0          ; IS IT D?
        BEQ     PDL             ; YES, NEGATE
        CMP     #'L,R0          ; IS IT L?
        BEQ     PDL             ; YES, NEGATE
        BIC     #1,R4           ; CLEAR NEGATE FLAG
        BR      PNN             ; SKIP, NOT NEGATIVE
PDL:    BIS     #1,R4           ; SET NEGATE FLAG

PNN:
        MOV     R3,-(SP)        ; PUSH STREAM
        JSR     PC,PRSWU        ; PARSE NUMBER
        BCS     PDONE           ; IF WE'RE DONE, FINISH UP
        CLR     (SP)+           ; CLEAN UP STACK
        BIT     #1,R4           ; CHECK THE NEGATE FLAG
        BEQ     P2              ; IF NOT SKIP, DON'T NEGATE
        NEG     R1              ; NEGATE
P2:
        MOV     -4(R2),(R2)     ; MOVE PREVIOUS VALUE INTO NEW VALUE
        ADD     R1,(R2)+        ; ADD PARSED VALUE TO NEW VALUE
        MOV     R3,-(SP)        ; STREAM = R3
        JSR     PC,FGETC        ; FGETC(R3)
        CLR     (SP)+           ; CLEAN UP STACK
        CMP     #',,R0          ; IS IT A COMMA?
        BEQ     P0              ; IF SO, MOVE TO NEXT VALUE
        CLR     -(SP)           ; PUSH JUNK WORD TO STACK FOR CLEANUP
PDONE:
        CLR     (SP)+           ; CLEAN UP STACK FROM LAST PRSWU
        MOV     R2,R0           ; RETURN END ADDRESS
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; DIST(X,Y)
;
; RETURN THE MANHATTAN DISTANCE BETWEEN TWO SIGNED INTS
;
DIST:
        TST     2(SP)           ; CHECK X
        BPL     DIST1           ; IF POSITIVE, SKIP
        NEG     2(SP)           ; NEGATE IT
DIST1:  TST     4(SP)           ; CHECK Y
        BPL     DIST2           ; IF POSITIVE, SKIP
        NEG     4(SP)           ; NEGATE IT
DIST2:  MOV     2(SP),R0        ; R0 <- X
        ADD     4(SP),R0        ; R0 <- X + Y
        RTS     PC              ; RETURN TO CALLER

;
; ADIFF(X0,X1)
;
; RETURN THE ABSOLUTE DIFFERENCE BETWEEN TWO SIGNED INTS
; |X0 - X1|
;
ADIFF:  CMP     2(SP),4(SP)     ; COMPARE X0 AND X1
        BGT     ADIFF1          ; IF X0 > X1, SKIP AHEAD
        MOV     4(SP),R0        ; R0 <- X1
        SUB     2(SP),R0        ; R0 <- X1 - X0
        BR      ADIFF2          ; WE'RE DONE
ADIFF1: MOV     2(SP),R0        ; R0 <- X0
        SUB     4(SP),R0        ; R0 <- X0 - X1
ADIFF2: RTS     PC              ; RETURN TO CALLER

PATH1:
        .=.+2000
PATH2:
        .=.+2000

