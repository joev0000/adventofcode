; ADVENT OF CODE 2019: DAY 1
; THE TYRANNY OF THE ROCKET EQUATION
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #BANNER,-(SP)   ; S = BANNER
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        SUB     #10,SP          ; ALLOCATE LOCAL VARS
                                ;   0(SP): FUEL REQ DRY HI
                                ;   2(SP): FUEL REQ DRY LO
                                ;   4(SP): FUEL REQ WET HI
                                ;   6(SP): FUEL REQ WET LO

        MOV     SP,R2           ; R2 <-SP, TO CLEAR LOCAL VARS
        ADD     #10,R2          ; ADD 8(10) TO R2
S3:     CLR     -(R2)           ; CLEAR WORD
        CMP     R2,SP           ; ARE WE DONE?
        BNE     S3              ; IF NOT, MOVE TO NEXT WORD


S0:     MOV     #PTIN,-(SP)     ; PUSH PTIN STREAM
        JSR     PC,P10U32       ; P10U32(PTIN)
        BCS     S2              ; IF ERROR, DONE
        CLR     (SP)+           ; CLEAN UP STACK
        MOV     R1,R3           ; MASS LO <- RESULT LO
        MOV     R0,R2           ; MASS HI <- RESULT HI

        MOV     R3,-(SP)        ; PUSH MASS LO
        MOV     R2,-(SP)        ; PUSH MASS HI
        JSR     PC,FREQD        ; FREQD(MASS HI, MASS LO)
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R1,2(SP)        ; ADD TO FUEL REQ DRY LO
        ADC     (SP)            ; ADD CARRY TO FUEL REQ DRY HI
        ADD     R0,(SP)         ; ADD TO FUEL REQ DRY HI

        MOV     R3,-(SP)        ; PUSH MASS LO
        MOV     R2,-(SP)        ; PUSH MASS HI
        JSR     PC,FREQW        ; FREQW(MASS HI, MASS LO)
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R1,6(SP)        ; ADD TO FUEL REQ WET LO
        ADC     4(SP)           ; ADD CARRY TO FUEL REQ WET HI
        ADD     R0,4(SP)        ; ADD TO FUEL REQ WET HI

        MOV     #PTIN,-(SP)     ; STREAM = PTIN
        JSR     PC,FGETC        ; FGETC(PTIN)
        CLR     (SP)+           ; CLEAN UP STACK
        BR      S0              ; NEXT COMPONENT

S2:     CLR     (SP)+           ; CLEAN UP STACK FROM LAST P10U32 CALL
        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #PART1,-(SP)    ; S = PART1
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     2(SP),R3        ; R3 <- FUEL REQ DRY LO
        MOV     (SP),R2         ; R2 <- FUEL REQ DRY HI

        MOV     #STDOUT,-(SP)   ; PUSH STDOUT
        MOV     R3,-(SP)        ; PUSH FUEL REQ DRY LO
        MOV     R2,-(SP)        ; PUSH FUEL REQ DRY HI
        JSR     PC,FU3210       ; FORMAT AND OUTPUT
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #CRLF,-(SP)     ; S = CRLF
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #PART2,-(SP)    ; S = PART2
        JSR     PC,FPUTS        ; FPUTS(S, STDOUT)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     6(SP),R3        ; R3 <- FUEL REQ WET LO
        MOV     4(SP),R2        ; R2 <- FUEL REQ WET HI

        MOV     #STDOUT,-(SP)   ; PUSH STDOUT
        MOV     R3,-(SP)        ; PUSH FUEL REQ WET LO
        MOV     R2,-(SP)        ; PUSH FUEL REQ WET HI
        JSR     PC,FU3210       ; FORMAT AND OUTPUT
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #CRLF,-(SP)     ; S = CRLF
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        ADD     #10,SP          ; DEALLOCATE LOCAL VARS

S1:     HALT                    ; PROGRAM COMPLETE
        BR      START           ; RESTART ON CONTINUE

;
; FREQD(MASS HI, MASS LO) -> R0: REQ HI, R1: REQ LO
;
; GET THE FUEL REQUIREMENT FOR THE DRY MASS, NOT COUNTING THE MASS
; OF THE FUEL ITSELF.
FREQD:
        MOV     R4,-(SP)        ; SAVE R4
        MOV     4(SP),R0        ; R0 <- MASS HI
        MOV     6(SP),R1        ; R1 <- MASS LO
        SUB     #10,SP          ; ALLOCATE RESULT BUFFER
        MOV     SP,R4           ; R4 <- DIVIDE RESULT

        MOV     R4,-(SP)        ; PUSH RESULT BUFFER
        MOV     #3,-(SP)        ; PUSH DIVISOR = 3
        CLR     -(SP)           ;   "
        MOV     R1,-(SP)        ; PUSH DIVIDEND LO
        MOV     R0,-(SP)        ; PUSH DIVIDEND HI
        JSR     PC,DIVU32       ; DIVU32(DIVIDEND, DIVISOR, RESULT)
        ADD     #12,SP          ; CLEAN UP STACK

        SUB     #2,2(R4)        ; SUBTRACT 2 FROM QUOTIENT LO
        SBC     (R4)            ; SUBTRACT CARRY FROM QUOTIENT HI
        BPL     FD1             ; IF NON-NEGATIVE, SKIP AHEAD
        CLR     R0              ; CLAMP RESULT TO ZERO
        CLR     R1              ; CLAMP RESULT TO ZERO
        BR      FD2             ; SKIP AHEAD
FD1:
        MOV     (R4),R0         ; R0 <- QUOTIENT HI
        MOV     2(R4),R1        ; R1 <- QUOTIENT LO
FD2:
        ADD     #10,SP          ; DEALLOCATE RESULT BUFFER
        MOV     (SP)+,R4        ; RESTORE R4
        RTS     PC              ; RETURN TO CALLER

;
; FREQW(MASS HI, MASS LO) -> R0: REQ HI, R1: REQ LO
;
; GET THE FUEL REQUIREMENT FOR THE WET MASS, COUNTING THE MASS OF THE
; FUEL
FREQW:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        CLR     R2              ; R2 <- REQ HI
        CLR     R3              ; R3 <- REQ LO

        MOV     6(SP),R0        ; R0 <- MASS HI
        MOV     10(SP),R1       ; R1 <- MASS LO
FW1:
        MOV     R1,-(SP)        ; PUSH MASS LO
        MOV     R0,-(SP)        ; PUSH MASS HI
        JSR     PC,FREQD        ; FREQD
        ADD     #4,SP           ; CLEAN STACK

        ADD     R1,R3           ; REQ LO = REQ LO + MASS LO
        ADC     R2              ; REQ HI = REQ HI + CARRY
        ADD     R0,R2           ; REQ HI = REQ HI + MASS HI
        TST     R1              ; CHECK DRY MASS LO
        BNE     FW1             ; IF NOT ZERO, LOOP
        TST     R0              ; CHECK DRY MASS HI
        BNE     FW1             ; IF NOT ZERO, LOOP

        MOV     R3,R1           ; REQ LO
        MOV     R2,R0           ; REQ HI

        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; STATIC DATA
;
BANNER: .ASCII  "ADVENT OF CODE 2019 DAY 1"
CRLF:   .BYTE   15,12,0         ; CR,LF
PART1:  .ASCII  "PART 1: "
        .BYTE   0
PART2:  .ASCII  "PART 2: "
        .BYTE   0
