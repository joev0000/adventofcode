; ADVENT OF CODE 2019: DAY 4
; SECURE CONTAINER
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        SUB     #14,SP          ; ALLOCATE SPACE FOR LOCALS
                                ; 13(SP): END OF RANGE: LEAST SIG
                                ;    ...
                                ;  6(SP): END OF RANGE: MOST SIG
                                ;  5(SP): CURRENT: LEAST SIG
                                ;   ...
                                ;   (SP): CURRENT: MOST SIG

        CLR     R4              ; R4 <- HI(COUNT OF MATCHING NUMBERS)
        CLR     R5              ; R5 <- LO(COUNT OF MATCHING NUMBERS)

        MOV     SP,R1           ; R1 <- CURRENT: MOST SIG DIGIT
        MOV     R1,R2           ; R2 <- CURRENT: MOST SIG DIGIT
        ADD     #6,R2           ; R2 <- CURRENT: LEAST SIG DIGIT
        MOV     #PTIN,-(SP)     ; STREAM <- PTIN
L01:    JSR     PC,FGETC        ; FGETC(STREAM)
        MOVB    R0,(R1)+        ; STORE DIGIT
        CMP     R1,R2           ; ARE WE AT THE LEAST SIG DIGIT?
        BNE     L01             ; NO, GET THE NEXT ONE
        JSR     PC,FGETC        ; EAT THE HYPHEN
        ADD     #6,R2           ; R2 <- END OF RANGE: LEAST SIG DIGIT
L02:    JSR     PC,FGETC        ; FGETC(STREAM)
        MOVB    R0,(R1)+        ; STORE DIGIT
        CMP     R1,R2           ; ARE WE AT THE LEAST SIG DIGIT?
        BNE     L02             ; NO, GET THE NEXT ONE
        CLR     (SP)+           ; CLEAN UP STACK FROM FGETC CALLS

L1:     MOV     SP,-(SP)        ; MSD <- SP
        JSR     PC,TADJ         ; TADJ(MSD)
        BCS     L2              ; CARRY SET: NO MATCH
        JSR     PC,TINCR        ; TINCR(MSD)
        BCS     L2              ; CARRY SET: NO MATCH

        INC     R5              ; INCREMENT LO(COUNT)
        BEQ     L2              ; IF NO CARRY, SKIP
        INC     R4              ; INCREMENT HI(COUNT)

L2:     CLR     (SP)+           ; CLEAN UP STACK
        MOV     #5,R1           ; R1 <- CURRENT: LEAST SIG DIGIT
        ADD     SP,R1           ;
L3:     INCB    (R1)            ; INCREMENT THE DIGIT
        CMPB    (R1),#'9        ; COMPARE IT WITH 9(ASCII)
        BLE     L4              ; IF IT'S 9 OR LESS, CHECK RANGE
        MOVB    #'0,(R1)        ; SET DIGIT TO 0(ASCII)
        DEC     R1              ; CARRY: MOVE TO NEXT DIGIT
        CMP     R1,SP           ; ARE WE DONE?
        BEQ     L4              ; IF SO, CHECK RANGE
        BR      L3              ; OTHERWISE, MOVE TO NEXT DIGIT

        ; CHECK RANGE
L4:     MOV     SP,R1           ; R1 <- CURRENT: LEAST SIG DIGIT
        ADD     #4,R1           ;
        MOV     SP,R2           ; R2 <- END OF RANGE: LEAST SIG DIGIT
        ADD     #12,R2          ;
L5:     CMP     (R1)-,(R2)-     ; COMPARE DIGITS
        BNE     L1              ; IF NOT EQUAL, WE'RE NOT DONE YET
        CMP     R1,SP           ; ARE WE AT THE MOST SIG DIGIT?
        BNE     L5              ; NO, TRY NEXT DIGIT

L9:
        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #BANNER,-(SP)   ; S = BANNER
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R5,-(SP)        ; ARG1 <- LO(COUNT)
        MOV     R4,-(SP)        ; ARG0 <- HI(COUNT)
        MOV     #PART1,-(SP)    ; FORMAT <- PART1
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT, ...)
        ADD     #10,SP          ; CLEAN UP STACK

        ADD     #4,SP           ; DEALLOCATE LOCALS

        HALT                    ; WE'RE DONE
        JMP     START           ; RESTART ON CONTINUE

;
; TADJ(MOST SIGNIFICANT OF SIX ASCII DIGITS): CARRY SET IF NO MATCH
;
; TEST IF THERE ARE TWO ADJACENT DECIMAL DIGITS ARE THE SAME
;
TADJ:
        SEC
        RTS     PC              ; RETURN TO CALLER

;
; TINCR(MOST SIGNIFICANT OF SIX ASCII DIGITS): CARRY SET IF NO MATCH
;
; TEST IF DECIMAL DIGITS INCREASE LEFT-TO-RIGHT
;
TINCR:
        RTS     PC              ; RETURN TO CALLER

;
; STATIC DATA
;
BANNER: .ASCII  /ADVENT OF CODE 2019 DAY 4/
        .BYTE   15,12,0         ; CR,LF
PART1:  .ASCII  /PART 1: %lu/
        .BYTE   15,12,0
