; ADVENT OF CODE 2019: DAY 4
; SECURE CONTAINER
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        SUB     #4,SP           ; ALLOCATE SPACE FOR LOCALS
                                ;  2(SP): HI(END OF RANGE)
                                ;   (SP): LO(END OF RANGE)

        CLR     R4              ; R4 <- LO(COUNT OF MATCHING NUMBERS)
        CLR     R5              ; R5 <- HI(COUNT OF MATCHING NUMBERS)

        ; PARSE INPUT
        MOV     #PTIN,-(SP)     ; STREAM <- PTIN
        JSR     PC,P10U32       ; P10U32(STREAM)
        MOV     R0,R2           ; R2 <- HI(START OF RANGE)
        MOV     R1,R3           ; R3 <- LO(START OF RANGE)
        JSR     PC,FGETC        ; FGETC(STREAM)
        JSR     PC,P10U32       ; P10U32(STREAM)
        ADD     #2,SP           ; CLEAN UP STACK
        MOV     R0,2(SP)        ; STORE HI(END OF RANGE)
        MOV     R1,(SP)         ; STORE LO(END OF RANGE)

L0:
        CMP     R2,2(SP)        ; COMPARE HI(CURRENT), HI(END OF RANGE)
        BLT     L1              ; IF IT'S LESS, WE'RE GOOD
        CMP     R3,(SP)         ; COMPARE LO(CURRENT), LO(END OF RANGE)
        BGT     L9              ; IF GREATER THAN, WE'RE DONE
L1:
        MOV     R3,-(SP)        ; LO <- LO(CURRENT)
        MOV     R2,-(SP)        ; HI <- HI(CURRENT)
        JSR     PC,TADJ         ; TADJ(HI,LO)
        TST     R0              ; CHECK RESULT
        BEQ     L8              ; IF ZERO, NO ADJACENCY, NEXT
        JSR     PC,TNODEC       ; TNODEC(HI,LO)
        TST     R0              ; CHECK RESULT
        BEQ     L8              ; IF ZERO, DIGITS INCREASE, NEXT

        INC     R5              ; WE FOUND ONE, INCREMENT LO(COUNT)
        BNE     L8              ; IF WE DON'T CARRY, CONTINUE
        INC     R4              ; INCREMENT HI(COUNT)

L8:     ADD     #4,SP           ; CLEAN UP STACK
        INC     R3              ; INCREMENT LO(CURRENT)
        BNE     L0              ; IF WE DIDN'T CARRY, NEXT NUMBER
        INC     R2              ; INCREMENT HI(CURRENT)
        BR      L0              ; NEXT NUMBER

L9:
        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #BANNER,-(SP)   ; S = BANNER
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R5,-(SP)        ; ARG1 <- LO(COUNT)
        MOV     R4,-(SP)        ; ARG0 <- HI(COUNT)
        MOV     #PART1,-(SP)    ; FORMAT <- PART1
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT, ...)
        ADD     #10,SP          ; CLEAN UP STACK

        ADD     #4,SP           ; DEALLOCATE LOCALS

        HALT                    ; WE'RE DONE
        JMP     START           ; RESTART ON CONTINUE

;
; TADJ(HI, LO): R0 <- 0 IF FALSE, 1 IF TRUE
;
; TEST IF THERE ARE TWO ADJACENT DECIMAL DIGITS ARE THE SAME
;
TADJ:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4

        SUB     #4,SP           ; LOCALS
                                ; 6(SP): LO(REMAINDER)
                                ; 4(SP): HI(REMAINDER)
                                ; 2(SP): LO(QUOTIENT)
                                ;  (SP): HI(QUOTIENT)

        MOV     22(SP),R4       ; R4 <- HI
        MOV     24(SP),R3       ; R3 <- LO

        CLR     R0              ; ASSUME FALSE
        MOV     #6,R1           ; THERE ARE SIX DIGITS
        MOV     #177777,R2      ; PREVIOUS DIGIT (INIT: -1)
TADJ1:
        MOV     SP,-(SP)        ; RESULT <- SP
        MOV     #12,-(SP)       ; LO(DIVISOR) <- 10(10)
        CLR     -(SP)           ; HI(DIVISOR) <- 0
        MOV     R3,-(SP)        ; LO(DIVIDEND) <- LO
        MOV     R4,-(SP)        ; HI(DIVIDEND) <- HI
        JSR     PC,DIVU32       ; DIVU32(HI(DIV'D), LO(DIV'D),
                                ;        HI(DIV'R), LO(DIV'R),
                                ;        RESULT)
        ADD     #12,SP          ; CLEAN UP STACK
        CMP     6(SP),R2        ; IS REMAINDER THE SAME AS LAST ONE?
        BEQ     TADJ8           ; YES, WE'RE DONE
        MOV     6(SP),R2        ; IF NOT, SAVE THE DIGIT FOR NEXT TIME
        MOV     (SP),R4         ; HI <- HI(QUOTIENT)
        MOV     2(SP),R3        ; LO <- LO(QUOTIENT)

        DEC     R1              ; DECREMENT COUNTER
        BNE     TADJ1           ; IF NOT DONE, TRY NEXT DIGIT
        BR      TADJ9           ; IF SO, WE'RE DONE
TADJ8:  INC     R0              ; RETURN TRUE
TADJ9:
        MOV     (SP)+,R4        ; RESTORE R2
        MOV     (SP)+,R3        ; RESTORE R2
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; TNODEC(HI, LO): R0 <- 0 IF FALSE, 1 IF TRUE
;
; TEST IF DECIMAL DIGITS DO NOT INCREASE LEFT-TO-RIGHT
;
TNODEC:
        RTS     PC              ; RETURN TO CALLER

;
; STATIC DATA
;
BANNER: .ASCII  /ADVENT OF CODE 2019 DAY 4/
        .BYTE   15,12,0         ; CR,LF
PART1:  .ASCII  /PART 1: %lu/
        .BYTE   15,12,0
