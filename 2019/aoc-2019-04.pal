; ADVENT OF CODE 2019: DAY 4
; SECURE CONTAINER
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        SUB     #14,SP          ; ALLOCATE SPACE FOR LOCALS
                                ; 13(SP): END OF RANGE: LEAST SIG
                                ;    ...
                                ;  6(SP): END OF RANGE: MOST SIG
                                ;  5(SP): CURRENT: LEAST SIG
                                ;   ...
                                ;   (SP): CURRENT: MOST SIG

        CLR     R4              ; R4 <- COUNT OF MATCHING NUMBERS

        MOV     SP,R1           ; R1 <- CURRENT: MOST SIG DIGIT
        MOV     R1,R2           ; R2 <- CURRENT: MOST SIG DIGIT
        ADD     #6,R2           ; R2 <- CURRENT: LEAST SIG DIGIT
        MOV     #PTIN,-(SP)     ; STREAM <- PTIN
L01:    JSR     PC,FGETC        ; FGETC(STREAM)
        MOVB    R0,(R1)+        ; STORE DIGIT
        CMP     R1,R2           ; ARE WE AT THE LEAST SIG DIGIT?
        BNE     L01             ; NO, GET THE NEXT ONE
        JSR     PC,FGETC        ; EAT THE HYPHEN
        ADD     #6,R2           ; R2 <- END OF RANGE: LEAST SIG DIGIT
L02:    JSR     PC,FGETC        ; FGETC(STREAM)
        MOVB    R0,(R1)+        ; STORE DIGIT
        CMP     R1,R2           ; ARE WE AT THE LEAST SIG DIGIT?
        BNE     L02             ; NO, GET THE NEXT ONE
        CLR     (SP)+           ; CLEAN UP STACK FROM FGETC CALLS

L3:     MOV     SP,R0           ; MOVE SP TO R0 TO PREVENT MOV SP,-(SP)
        MOV     R0,-(SP)        ; N <- MSD OF PASSWORD
        JSR     PC,NEXTPW       ; NEXTPW(N)
        CLR     (SP)+           ; CLEAN UP STACK

        INC     R4              ; INCREMENT THE COUNT OF VALID PWS

        ; CHECK RANGE
L4:     MOV     #6,R3
        MOV     SP,R1           ; R1 <- CURRENT: LEAST SIG DIGIT
        MOV     SP,R2           ; R2 <- END OF RANGE: LEAST SIG DIGIT
        ADD     #6,R2           ;
L5:     CMPB    (R1)+,(R2)+     ; COMPARE DIGITS
        BLT     L3              ; IF CURRENT < END, TRY NEXT PW
        BGT     L9              ; IF CURRENT > END, WE'RE DONE
        DEC     R3              ; IF CURRENT = END
        BNE     L5              ;   TRY NEXT DIGIT

L9:
        DEC     R4              ; DECREMENT THE LAST COUNTED PW

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #BANNER,-(SP)   ; S = BANNER
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R4,-(SP)        ; ARG0 <- HI(COUNT)
        MOV     #PART1,-(SP)    ; FORMAT <- PART1
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT, ...)
        ADD     #10,SP          ; CLEAN UP STACK

        ADD     #4,SP           ; DEALLOCATE LOCALS

        HALT                    ; WE'RE DONE
        JMP     START           ; RESTART ON CONTINUE

;
; NEXTPW(N)
;
; SET N TO BE THE NEXT VALID PASSWORD AFTER N
;
; ALGORITHM:
; 1. INCREMENT THE NUMBER
; 2. ENFORCE THE "NON-DECREASING VALUES" RULE BY EXTENDING THE HIGHEST
;    DIGIT ALL THE WAY TO THE RIGHT
; 3. CHECK THE "AT LEAST ONE DUPLCIATE" RULE.  IF WE FIND A DUPLICATE,
;    THEN WE'RE DONE
;    OTHERWISE, FIND THE LAST NON-9 DIGIT, INCREMENT IT, AND EXTEND
;    THE DIGIT TO THE RIGHT
;
NEXTPW:
        MOV     R0,-(SP)        ; SAVE R0
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     #5,R0           ; SET R0 TO POINT TO THE LAST DIGIT
        ADD     10(SP),R0       ;   OF N

        ; INCREMENT THE NUMBER
NEXT1:  INCB    (R0)            ; INCREMENT THE DIGIT
        CMPB    (R0),#'9        ; COMPARE WITH 9(ASCII)
        BLE     NEXT2           ; DONE INCREMENTING.
        MOVB    #'0,(R0)        ; SET DIGIT TO 0(ASCII)
        DEC     R0              ; POINT TO PREVIOUS DIGIT
        CMP     R0,10(SP)       ; ARE WE PAST THE FIRST DIGIT?
        BGE     NEXT1           ; NO, MOVE TO PREVIOUS DIGIT

        ; ENFORCE "NON-DECREASING VALUES"
NEXT2:
        CLR     R2              ; R2 HOLDS THE LAST DIGIT
        MOV     #5,R1           ; SET R1 TO POINT TO THE LAST DIGIT
        ADD     10(SP),R1
        MOV     10(SP),R0       ; SET R0 TO POINT TO THE FIRST DIGIT
NEXT20: CMP     R0,R1           ; ARE WE AT THE LAST DIGIT?
        BGT     NEXT3           ; YES, GO TO NEXT STEP
        CMPB    (R0),R2         ; IS THE VALUE AT R0 LESS THAN R2?
        BLT     NEXT21          ; IF SO, EXTEND IT TO THE RIGHT
        MOVB    (R0)+,R2        ; OTHERWISE, WE FOUND A LARGER DIGIT
        BR      NEXT20          ; MOVE ON TO THE NEXT DIGIT
NEXT21: MOVB    R2,(R0)+        ; EXTEND THE LARGEST DIGIT TO THE RIGHT
        CMP     R0,R1           ; ARE WE AT THE END?
        BLE     NEXT21          ; NO, GO TO THE NEXT DIGIT

        ; CHECK THE "AT LEAST ONE DUPLICATE" RULE
NEXT3:
        MOV     #5,R1           ; SET R1 TO POINT TO THE LAST DIGIT
        ADD     10(SP),R1
        MOV     10(SP),R0       ; SET R0 TO POINT TO THE FIRST DIGIT
        MOVB    (R0)+,R2        ; STASH THE DIGIT VALUE IN R2
NEXT30: CMP     R0,R1           ; ARE WE AT THE END?
        BGT     NEXT4           ; YES, WE DIDN'T FIND A DUPLICATE
        CMPB    (R0),R2         ; IS THE DIGIT THE SAME AS THE PREVIOUS
        BEQ     NEXT5           ; YES, WE FOUND A DUPLICATE, WE'RE DONE
        MOVB    (R0)+,R2        ; STASH THE DIGIT VALUE IN R2
        BR      NEXT30          ; AND TRY THE NEXT DIGIT

        ; INCREMENT THE LAST NON-9 DIGIT, AND EXTEND
NEXT4:
        MOV     #4,R0           ; SET R0 TO POINT TO SECOND TO LAST
        ADD     10(SP),R0       ;   DIGIT
        MOV     #5,R1           ; SET R1 TO
        ADD     10(SP),R1       ;   THE LAST DIGIT
NEXT40: CMPB    (R0),#'9        ; IS THE DIGIT LESS THAN 9?
        BLT     NEXT41          ; IF SO, MOVE TO EXTEND
        DEC     R0              ; IT'S 9, TRY PREVIOUS DIGIT
        BR      NEXT40          ; NEXT!
NEXT41: INCB    (R0)            ; INCREMENT THE DIGIT
        MOVB    (R0),R2         ; STASH IT
        INC     R0              ; MOVE TO THE NEXT DIGIT
NEXT42: CMP     R0,R1           ; ARE WE AT THE END?
        BGT     NEXT5           ; YES, WE'RE DONE
        MOVB    R2,(R0)+        ; NO, EXTEND THE STASHED DIGIT
        BR      NEXT42          ; MOVE TO THE NEXT ONE

        ; WE HAVE THE NEXT CANDIDATE PW
NEXT5:
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        MOV     (SP)+,R0        ; RESTORE R0
        RTS     PC              ; RETURN TO CALLER

;
; STATIC DATA
;
BANNER: .ASCII  /ADVENT OF CODE 2019 DAY 4/
CRLF:   .BYTE   15,12,0         ; CR,LF
PART1:  .ASCII  /PART 1: %u/
        .BYTE   15,12,0
