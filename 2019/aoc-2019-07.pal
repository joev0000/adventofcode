; ADVENT OF CODE 2019: DAY 
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER


        ICSIZE=4000             ; SIZE OF INTCODE MEMORY

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        ; PRINT BANNER

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #BANNER,-(SP)   ; S = BANNER
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        ; PARSE INTCODE PROGRAM

        MOV     #ICSIZE,-(SP)   ; SIZE <- ICSIZE
        JSR     PC,MALLOC       ; MALLOC(SIZE)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,R2           ; R2 <- DEST

        MOV     R2,-(SP)        ; DEST <- R2
        MOV     #PTIN,-(SP)     ; STREAM <- PTIN
        JSR     PC,PARSE        ; PARSE(STREAM, DEST)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R3           ; R3 <- INTEGERS READ

        ; ALLOCATE AND INITIALIZE INTCODE COMPUTER

        MOV     ICSIZE,-(SP)    ; SIZE <- ICSIZE
        JSR     PC,ICINIT       ; ICINIT(SIZE)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,R4           ; R4 <- COMPUTER

        MOV     R3,-(SP)        ; LENGTH <- R3
        MOV     R2,-(SP)        ; SOURCE <- R2
        MOV     R4,-(SP)        ; COMPUTER <- R4
        JSR     PC,ICLOAD       ; ICLOAD(COMPUTER, SOURCE, LENGTH)
        ADD     #6,SP           ; CLEAN UP STACK

        ; MAIN LOOP

        MOV     R4,-(SP)        ; COMPUTER <- R4
START0: JSR     PC,ICSTEP       ; ICSTEP(COMPUTER)
        CMP     #143,R0         ; CHECK FOR HALT
        BEQ     START9          ; WE'RE DONE
        CMP     #1,R0           ; CHECK FOR INPUT NEEDED
        BNE     START1          ; IF NONE NEEDED, SKIP AHEAD
        MOV     #STDIN,-(SP)    ; STREAM <- STDIN
        JSR     PC,PRSWU        ; PRSWU(STREAM)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,-(SP)        ; HI
        MOV     R1,-(SP)        ; LO
        MOV     R4,-(SP)        ; COMPUTER
        JSR     PC,ICIN         ; ICIN(COMPUTER, LO, HI)
        ADD     #6,SP           ; CLEAN UP STACK
START1: BIT     #2,2(R4)        ; CHECK OUTPUT STATUS BIT
        BEQ     START2          ; NO OUTPUT, SKIP AHEAD
        JSR     PC,ICOUT        ; ICOUT(COMPUTER)
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        MOV     R1,-(SP)        ; VALUE LO <- OUT LO
        MOV     R0,-(SP)        ; VALUE HI <- OUT HI
        JSR     PC,FMTDU        ; FMTDU(HI, LO, STREAM)
        ADD     #6,SP           ; CLEAN UP STACK
START2: BR      START0          ; NEXT STEP
START9: TST     (SP)+           ; CLEAN UP STACK

        MOV     R2,-(SP)        ; PTR <- R2
        JSR     PC,FREE         ; FREE(PTR)
        MOV     R4,(SP)         ; PTR <- R4
        JSR     PC,FREE         ; FREE(PTR)
        TST     (SP)+           ; CLEAN UP STACK
        HALT                    ; THAT'S ALL, FOLKS!


;
; PARSE(STREAM, DEST)
;
; PARSE COMMA SEPERATED LIST OF 32 BIT INTEGERS INTO MEMORY AT THE
; GIVEN LOCATION.
; RETURN NUMBER OF INTEGERS READ
;
PARSE:  MOV     R2,-(SP)        ; SAVE R1
        MOV     6(SP),R2        ; R2 <- DEST

        MOV     4(SP),-(SP)     ; STREAM <- STREAM
PARSE0: JSR     PC,PRSWU        ; PRSWU(STREAM)
        MOV     R0,(R2)+        ; WRITE HI
        MOV     R1,(R2)+        ; WRITE LO

        JSR     PC,FGETC        ; FGETC(STREAM)
        CMP     #',,R0          ; IS IT A COMMA
        BEQ     PARSE0          ; IF SO, PARSE NEXT VALUE
        TST     (SP)+           ; CLEAN UP STACK

        MOV     R2,R0           ; R2 <- LAST WORD IN DEST
        SUB     6(SP),R0        ; R0 <- NUMBER OF WORDS IN DEST
        ASR     R0              ;
        ASR     R0              ; DIVIDE BY FOUR TO GET INTEGERS READ

        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER


; COMPUTER:
;  0(SP): PC
;  2(SP): STATUS
;       : BIT  0: INPUT AVAILABLE
;       : BIT  1: OUTPUT AVAILABLE
;       : BIT 15: HALTED
;  4(SP): INPUT BUFFER HI
;  6(SP): INPUT BUFFER LO
; 10(SP): OUTPUT BUFFER HI
; 12(SP): OUTPUT BUFFER LO
; 14(SP): MEMORY

;
; ICINIT(SIZE)
;
; ALLOCATE AND INTIALIZE AN INTCODE COMPUTER
;
ICINIT: MOV     R1,-(SP)        ; SAVE R1
        MOV     4(SP),R0        ; R0 <- SIZE
        ASL     R0              ; R0 <- SPACE NEEDED FOR IC WORD MEMORY
        ADD     #14,R0          ; R0 <- SPACE NEEDED FOR IC
        MOV     R0,R1           ; R1 <- SPACE NEEDED FOR IC
        MOV     R0,-(SP)        ; SIZE <- SPACE NEEDED FOR IC
        JSR     PC,MALLOC       ; MALLOC(SIZE)
        TST     (SP)+           ; CLEAN UP STACK

        ADD     R0,R1           ; R1 <- END OF MEMORY
ICINI0: CLR     -(R1)           ; CLEAR MEMORY
        CMP     R0,R1           ; ARE WE AT THE BEGINNING?
        BNE     ICINI0          ; IF NOT, MOVE TO PREVIOUS WORD

        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; ICIN(COMPUTER, VALUE LO, VALUE HI)
;
; ADD AN ENTRY TO THE INPUT BUFFER
;
ICIN:   MOV     2(SP),R0        ; R0 <- COMPUTER
        BIS     #1,2(R0)        ; SET BIT 0 OF STATUS
        MOV     6(SP),4(R0)     ; WRITE HI VALUE
        MOV     4(SP),6(R0)     ; WRITE LO VALUE

        RTS     PC              ; RETURN TO CALLER

;
; ICOUT(COMPUTER): R0 VALUE HI, R1 VALUE LO
;
; GET THE VALUE FROM OUTPUT BUFFER, CLEARING THE OUTPUT FLAG

ICOUT:  MOV     2(SP),R0        ; R0 <- COMPUTER
        BIC     #2,2(R0)        ; CLEAR BIT 1 OF STATUS
        MOV     10(R0),R0       ; GET HI VALUE
        MOV     12(R0),R1       ; GET LO VALUE
        RTS     PC              ; RETURN TO CALLER

;
; ICGETP(COMPUTER, POSITION): R0 VALUE HI, R1 VALUE LO
;
; GET THE VALUE AT THE LOCATION GIVEN BY THE POSITION
;
ICGETP: MOV     2(SP),R0        ; R0 <- COMPUTER
        MOV     4(SP),R1        ; R1 <- POSITION

        MOV     R1,-(SP)        ; POSITION <- R1
        MOV     R0,-(SP)        ; COMPUTER <- R0
        JSR     PC,ICGETI
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     2(SP),R0        ; R0 <- COMPUTER
        BR      ICGET0

;
; ICGETI(COMPUTER, POSITION): R0 VALUE HI, R1 VALUE LO
;
; GET THE IMMEDIATE VALUE AT THE GIVEN POSITION
;
ICGETI: MOV     2(SP),R0        ; R0 <- COMPUTER
        MOV     4(SP),R1        ; R1 <- POSITION
ICGET0: ASL     R1              ; R1 <- POSITION * 2
        ASL     R1              ; R1 <- POSITION * 4
        ADD     #14,R1          ; R1 <- LOCATION MEMORY OFFSET
        ADD     R0,R1           ; R1 <- MEMORY LOCATION WITH HI
        MOV     (R1)+,R0        ; R0 <- VALUE HI
        MOV     (R1),R1         ; R1 <- VALUE LO
        RTS     PC              ; RETURN TO CALLER

;
; ICPUTP(COMPUTER, POSITION, VALUE LO, VALUE HI)
;
; WRITE THE VALUE TO THE GIVEN POSITION
;
ICPUTP: MOV     R0,-(SP)        ; SAVE R0
        MOV     R1,-(SP)        ; SAVE R1

        MOV     6(SP),R0        ; R0 <- COMPUTER
        MOV     10(SP),R1       ; R1 <- POSITION

        MOV     R1,-(SP)        ; POSITION <- R1
        MOV     R0,-(SP)        ; COMPUTER <- R0
        JSR     PC,ICGETI       ; ICGETI(COPUTER, POSITION)
        ADD     #4,SP           ; CLEAN UP STACK
        ASL     R1              ; R1 <- POSITION * 2
        ASL     R1              ; R1 <- POSITION * 4
        ADD     #14,R1          ; R1 <- LOCATION MEMORY OFFSET
        ADD     6(SP),R1        ; R1 <- MEMORY LOCATION WITH HI
        MOV     14(SP),(R1)+    ; HI <- HI
        MOV     12(SP),(R1)     ; LO <- LO

        MOV     (SP)+,R1        ; RESTORE R1
        MOV     (SP)+,R0        ; RESTORE R0
        RTS     PC              ; RETURN TO CALLER
;
; ICLOAD(COMPUTER, SOURCE, LENGTH)
;
; LOAD THE VALUES FROM SOURCE INTO MEMORY AT POS 0
ICLOAD: MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        MOV     14(SP),R3       ; R3 <- LENGTH IN IC WORDS
        ASL     R3              ; R3 <- LENGTH IN PDP WORDS
        ASL     R3              ; R3 <- LENGTH IN BYTES
        MOV     12(SP),R1       ; R1 <- SOURCE
        ADD     R3,R1           ; R1 <- END OF SOURCE
        MOV     10(SP),R2       ; R2 <- COMPUTER
        ADD     #14,R2          ; R2 <- MEMORY
        ADD     R3,R2           ; R2 <- END OF MEMORY
        ASR     R3              ; R3 <- LENGTH IN PDP WORDS

        TST     R3              ; CHECK THE REMAINING WORDS
ICLOA0: BEQ     ICLOA9          ; IF NO MORE WORDS, WE'RE DONE
        MOV     (R1)-,(R2)-     ; COPY THE WORD
        DEC     R3              ; DECREMENT THE COUNT
        BR      ICLOA0          ; NEXT

ICLOA9: MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER
;
; ICSTEP(COMPUTER)
;
; EXECUTE A SINGLE INSTRUCTION
; R0:   0: AN INSTRUCTION WAS SUCCESSFULLY RUN
;       1: AN IN OPERATION CALLED WITH AN EMPTY BUFFER
;       2: ILLEGAL MEMORY ACCESS
;     143: COMPUTER IS HALTED
;
ICSTEP: MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     10(SP),R2       ; R2 <- COMPUTER
        MOV     (R2),R3         ; R3 <- PC

        MOV     R3,-(SP)        ; POSITION <- R3
        MOV     R2,-(SP)        ; COMPUTER <- R2
        JSR     PC,ICGETI       ; ICGETI(COMPUTER, POSITION)
        ADD     #4,SP           ; CLEAN UP STACK
        INC     (R2)            ; INCREMENT PC

        MOV     #144,-(SP)      ; DIVISOR <- 100(10)
        MOV     R1,-(SP)        ; DIVIDEND <- LO
        JSR     PC,DIVWU        ; DIVWU(DIVIDEND, DIVISOR)
        ADD     #4,SP           ; CLEAN UP STACK

        CMP     #143,R1         ; CHECK FOR HALT
        BNE     ICSTE0          ; NOT HALT
        MOV     R1,R0           ; R0 <- R1 (143)
        BIS     #100000,2(R2)   ; SET HALT STATUS FLAG
        BR      ICSTE9          ; DONE
ICSTE0: ASL     R1              ; OP OFFSET IN TABLE
        ADD     #ICOP,R1        ; ADD TABLE OFFSET
        MOV     (R1),R4         ; R4 <- OP
        MOV     R0,-(SP)        ; MODES <- QUOTIENT
        MOV     R2,-(SP)        ; COMPUTER <- COMPUTER
        JSR     PC,(R4)         ; (OP)(COMPUTER, MODES)
        ADD     #4,SP           ; CLEAN UP STACK

ICSTE9: MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER


; ICPARM(COMPUTER, MODES): R0 HI, R1 LO
;
; GET THE PARAMETER VALUE FROM THE CURRENT PC
;
ICPARM: MOV     R2,-(SP)        ; SAVE R2

        MOV     4(SP),R2        ; R2 <- COMPUTER

        MOV     #12,-(SP)       ; DIVISOR <- 10(10)
        MOV     10(SP),-(SP)    ; DIVIDEND <- MODES
        JSR     PC,DIVWU        ; DIVWU(DIVIDEND, DIVISOR)
        MOV     R0,12(SP)       ; STASH REMAINING MODES IN ARG
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     (R2),-(SP)      ; POSITION <- PC
        MOV     R2,-(SP)        ; COMPUTER <- COMPUTER
        TST     R1              ; CHECK MODE
        BNE     ICPAR0          ; IF NON-ZERO, SKIP AHEAD
        JSR     PC,ICGETP       ; ICGETP(COMPUTER, POSITION)
        BR      ICPAR1
ICPAR0: JSR     PC,ICGETI       ; ICGETI(COMPUTER, POSITION)
ICPAR1: ADD     #4,SP           ; CLEAN UP STACK
        INC     (R2)            ; INCREMENT PC
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER


;
; ICADD(COMPUTER, MODES)
;
; EXECUTE INTCODE ADD INSTRUCTION
;
ICADD:  MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

        MOV     12(SP),R2       ; R2 <- COMPUTER
        MOV     14(SP),R3       ; R3 <- MODES

        MOV     R3,-(SP)        ; MODES <- R3
        MOV     R2,-(SP)        ; COMPUTER <- R2
        JSR     PC,ICPARM       ; ICPARM(COMPUTER, MODES)
        MOV     R1,R5           ; SET LO
        MOV     R0,R4           ; SET HI
        JSR     PC,ICPARM       ; ICPARM(COMPUTER, MODES)
        ADD     R1,R5           ; ADD LO
        ADC     R4              ; ADD CARRY TO HI
        ADD     R0,R4           ; ADD HI
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R4,-(SP)        ; HI <- HI
        MOV     R5,-(SP)        ; LO <- LO
        MOV     (R2),-(SP)      ; POSITION <- PC
        MOV     R2,-(SP)        ; COMPUTER <- COMPUTER
        JSR     PC,ICPUTP       ; ICPUTP(COMPUTER, POSITION, LO, HI)
        ADD     #10,SP          ; CLEAN UP STACK
        INC     (R2)            ; INCREMENT PC

        CLR     R0              ; INDICATE SUCCESS
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER
;
; ICMUL(COMPUTER, MODES)
;
; EXECUTE INTCODE MULTIPLY INSTRUCTION
;
ICMUL:  MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

        MOV     12(SP),R2       ; R2 <- COMPUTER
        MOV     14(SP),R3       ; R3 <- MODES

        MOV     R3,-(SP)        ; MODES <- R3
        MOV     R2,-(SP)        ; COMPUTER <- R2
        JSR     PC,ICPARM       ; ICPARM(COMPUTER, MODES)
        MOV     R1,R5           ; SET LO
        MOV     R0,R4           ; SET HI
        JSR     PC,ICPARM       ; ICPARM(COMPUTER, MODES)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R1,-(SP)        ; MULTIPLIER LO <- R1
        MOV     R0,-(SP)        ; MULTIPLIER HI <- R0
        MOV     R5,-(SP)        ; MULTIPLICAND LO <- R5
        MOV     R4,-(SP)        ; MULTIPLICAND HI <- R4
        JSR     PC,MULPU        ; MULPU(HI, LO, HI, LO)
        ADD     #10,SP          ; CLEAN UP STACK

        MOV     R0,-(SP)        ; HI <- HI
        MOV     R1,-(SP)        ; LO <- LO
        MOV     (R2),-(SP)      ; POSITION <- PC
        MOV     R2,-(SP)        ; COMPUTER <- COMPUTER
        JSR     PC,ICPUTP       ; ICPUTP(COMPUTER, POSITION, LO, HI)
        ADD     #10,SP          ; CLEAN UP STACK
        INC     (R2)            ; INCREMENT PC

        CLR     R0              ; INDICATE SUCCESS
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; ICINP(COMPUTER, MODES)
;
; EXECUTE INTCODE INPUT INSTRUCTION
;
ICINP:  MOV     R2,-(SP)        ; SAVE R2
        MOV     4(SP),R2        ; R2 <- COMPUTER
        BIT     #1,2(R2)        ; CHECK BIT 0 OF STATUS
        BNE     ICINP0          ; IF INPUT AVAILABLE, SKIP AHEAD
        MOV     #1,R0           ; INDICATE IN ON EMPTY BUFFER
        DEC     (R2)            ; DECREMENT PC SO WE CAN TRY AGAIN
        BR      ICINP9          ; WE'RE DONE
ICINP0: MOV     4(R2),-(SP)     ; HI <- INPUT HI
        MOV     6(R2),-(SP)     ; LO <- INPUT LO
        MOV     (R2),-(SP)      ; POSITION <- PC
        MOV     R2,-(SP)        ; COMPUTER <- COMPUTER
        JSR     PC,ICPUTP       ; ICPUTP(COMPUTER, POSITION, LO, HI)
        ADD     #10,SP          ; CLEAN UP STACK
        BIC     #1,2(R2)        ; CLEAR INPUT AVAILABLE STATUS
        INC     (R2)            ; INCREMENT PC
        CLR     R0              ; INDICATE SUCCESS
ICINP9: MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; ICOUTP(COMPUTER, MODES)
;
; EXECUTE INCODE OUTPUT INSTRUCTION
; OVERWRITES ANY EXISTING OUTPUT
;
ICOUTP: MOV     R2,-(SP)        ; SAVE R2
        MOV     4(SP),R2        ; R2 <- COMPUTER

        MOV     (R2),-(SP)      ; POSITION <- PC
        MOV     R2,-(SP)        ; COMPUTER <- COMPUTER
        JSR     PC,ICGETP       ; ICGETP(COMPUTER, POSITION)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R0,10(R2)       ; OUTPUT HI <- HI
        MOV     R1,12(R2)       ; OUTPUT LO <- LO
        BIS     #2,2(R2)        ; SET OUTPUT AVAIALBLE STATUS
        INC     (R2)            ; INCREMENT PC
        CLR     R0              ; INDICATE SUCCESS

        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

; INTCODE OPERATION TABLE
ICOP:   .WORD   0
        .WORD   ICADD
        .WORD   ICMUL
        .WORD   ICINP
        .WORD   ICOUTP
;
; STATIC DATA
;
BANNER: .ASCII  "ADVENT OF CODE 2019 DAY 7"
CRLF:   .BYTE   15,12,0         ; CR,LF
PART1:  .ASCII  "PART 1: "
        .BYTE   0
PART2:  .ASCII  "PART 2: "
        .BYTE   0
