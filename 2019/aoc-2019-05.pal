; ADVENT OF CODE 2019: DAY 5
; SUNNY WITH A CHANCE OF ASTEROIDS
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        MOV     #PTIN,-(SP)     ; STREAM <- PTIN
        MOV     #MEM,-(SP)      ; MEM <- MEM
        JSR     PC,ICLOAD       ; ICLOAD(MEM, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        CLR     R0              ; PC <- 0
        MOV     #STDOUT,-(SP)   ; OUTSTR <- STDOUT
        MOV     #STDIN,-(SP)    ; INSTR <- STDIN
        MOV     #MEM,-(SP)      ; MEM <- MEM
        MOV     R0,-(SP)        ; PC <- R0
L0:     JSR     PC,ICEXEC       ; ICEXEC(PC, MEM, INSTR, OUTSTR)
        TST     R0              ; CHECK R0
        BMI     L99             ; NEXT INSTR < 0 MEANS HALT
        MOV     R0,(SP)         ; SET PC FOR NEXT INSTRUCTION
        BR      L0              ; RUN NEXT INSTRUCTION
L99:    ADD     #10,SP          ; CLEAN UP STACK

        HALT                    ; DONE
        JMP     START           ; START AT THE TOP

;
; ICLOAD(MEM, STREAM): R0 = END
;
; LOAD INTCODE PROGRAM FROM STREAM INTO MEMORY
;
ICLOAD:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     10(SP),R2       ; R2 <- MEM
        MOV     12(SP),R3       ; R3 <- STREAM

        MOV     R3,-(SP)        ; STREAM <- R3
ICLOA1: JSR     PC,FSTRTL       ; FSTRTL(STREAM)
        MOV     R0,(R2)+        ; STORE RESULT HI
        MOV     R1,(R2)+        ; STORE RESULT LO
        JSR     PC,FGETC        ; FGETC(STREAM)
        CMP     #',,R0          ; IS IT A COMMA?
        BEQ     ICLOA1          ;   IF SO, LOAD NEXT VALUE
        CLR     (SP)+           ; CLEAN UP STACK

        MOV     R2,R0           ; RETURN LAST MEMORY LOCATION + 1
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; ICEXEC(PC,MEM,INSTR,OUTSTR): R0 = NEXT PC
;
; EXECUTE THE INSTRUCTION AT PC.  RETURN THE NEXT VALUE OF PC.
;
; OPCODES:
;   1: ADD :  A + B -> C
;   2: MUL :  A * B -> C
;   3: INP :  -> A
;   4: OUTP:  A ->
;   5: JIT : A != 0? PC = B
;   6: JIF : A == 0? PC = B
;   7: LT  : C = A < B
;   8: EQ  : C = A == B
;  99: HALT
ICEXEC:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

        MOV     14(SP),R5       ; R5 <- PC
        MOV     16(SP),R2       ; R2 <- MEM

        MOV     #1,-(SP)        ; MODE <- IMMEDIATE
        MOV     R2,-(SP)        ; MEM <- R2
        MOV     R5,-(SP)        ; PC <- R5
        JSR     PC,ICREAD       ; ICREAD(PC,MEM)
        ADD     #6,SP           ; CLEAN UP STACK
        INC     R5              ; INCREMENT PC

        MOV     #144,-(SP)      ; DIVISOR <- 100(10)
        MOV     R1,-(SP)        ; DIVIDEND <- INSTRUCTION
        JSR     PC,DIVWU        ; DIVWU (DIVIDEND, DIVISOR)
        ADD     #4,SP           ; CLEAN UP STACK

        CMP     R1,#10          ; IS THE OPCODE > 8(10)?
        BLE     .+4             ;   IF SO, SKIP
        CLR     R1              ; SET OPCODE TO 0 (HALT)
        ASL     R1              ; MULTIPLY OPCODE BY 2 TO GET OFFSET
        MOV     R0,-(SP)        ; MODES <- R0 (QUOTIENT)
        MOV     R2,-(SP)        ; MEM <- R2
        MOV     R5,-(SP)        ; PC <- R5
        JSR     PC,@OPCODE(R1)  ; (OPCODE)(PC,MEM,MODES)
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER
;
; ICREAD(PC,MEM,MODE): R0 = HI, R1 = LO
;
; IF MODE > 9, THE LAST DECIMAL DIGIT IS USED, THE REST STORED
; BACK TO MODE PARAMETER ON THE STACK
ICREAD:
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R5,-(SP)        ; SAVE R5

        MOV     10(SP),R5       ; R5 <- PC
        MOV     12(SP),R2       ; R2 <- MEM
        MOV     14(SP),R3       ; R3 <- MODE

        CLR     R0              ; REMAINING MODES IF MODE <= 9
        CMP     R3,#11          ; IS MODE <= 9?
        BLE     ICREA1          ;   YES, SKIP AHEAD
        MOV     #12,-(SP)       ; DIVIDEND <- 10(10)
        MOV     16(SP),-(SP)    ; DIVISOR <- MODES
        JSR     PC,DIVWU        ; DIVWU (DIVISOR,DIVIDEND)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R3           ; R3 <- THIS OPERATION'S MODE
ICREA1:
        MOV     R0,14(SP)       ; STORE REMAINING MODES
        ASL     R5              ; CONVERT PC TO OFFSET
        ASL     R5              ; CONVERT PC TO OFFSET
        ADD     R2,R5           ; ADD OFFSET TO MEM
        MOV     (R5)+,R0        ; GET HI(VALUE)
        MOV     (R5),R1         ; GET LO(VALUE)
        TST     R3              ; CHECK THE MODE
        BNE     ICREA9          ; IF 1, IMMEDIATE, WE'RE DONE
        MOV     R1,R5           ; POSITION MODE
        ASL     R5              ; CONVERT ADDRESS TO OFFSET
        ASL     R5              ; CONVERT ADDRESS TO OFFSET
        ADD     R2,R5           ; ADD OFFSET TO MEM
        MOV     (R5)+,R0        ; GET THE VALUE
        MOV     (R5),R1         ; GET THE VALUE

ICREA9:
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R3        ; RESTORE R3
        RTS     PC              ; RETURN TO CALLER
;
; ICWRIT(PC, MEM, HI(VALUE), LO(VALUE))
;
ICWRIT:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2

        MOV     6(SP),R1        ; R1 <- PC
        MOV     10(SP),R2       ; R2 <- MEM

        ASL     R1              ; CONVERT PC TO OFFSET
        ASL     R1              ; CONVERT PC TO OFFSET
        ADD     10(SP),R1       ; ADD OFFSET TO MEM
        ADD     #2,R1           ; GET THE LOW WORD
        MOV     (R1),R1         ; R1 <- PC OF VALUE
        ASL     R1              ; CONVERT PC TO OFFSET
        ASL     R1              ; CONVERT PC TO OFFSET
        ADD     10(SP),R1       ; ADD OFFSET TO MEM

        MOV     12(SP),(R1)+    ; SET HI(VALUE)
        MOV     14(SP),(R1)     ; SET LO(VALUE)
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

OPCODE: .WORD   ICHALT          ; OPCODE 0 (OPCODE > 8)
        .WORD   ICADD           ; OPCODE 1
        .WORD   ICMUL           ; OPCODE 2
        .WORD   ICIN            ; OPCODE 3
        .WORD   ICOUT           ; OPCODE 4
        .WORD   ICJIT           ; OPCODE 5
        .WORD   ICJIF           ; OPCODE 6
        .WORD   ICLT            ; OPCODE 7
        .WORD   ICEQ            ; OPCODE 8

;
; ICHALT(PC,MEM,MODES)
;
ICHALT:
        MOV     #177777,R0      ; NEXT PC IS -1
        RTS     PC              ; RETURN TO CALLER

;
; ICADD(PC,MEM,MODES)
;
ICADD:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

        ; DEBUG
;       MOV     12(SP),R2       ; R2 <- PC
;       DEC     R2
;       MOV     12(SP),R4       ; R4 <- PC
;       ASL     R4
;       ASL     R4
;       ADD     #MEM,R4
;
;       MOV     16(SP),-(SP)    ; MODES
;       MOV     12(R4),-(SP)     ; DEST
;       MOV     10(R4),-(SP)     ; DEST
;       MOV     6(R4),-(SP)      ; PARAM 2
;       MOV     4(R4),-(SP)      ; PARAM 2
;       MOV     2(R4),-(SP)      ; PARAM 1
;       MOV     (R4),-(SP)      ; PARAM 1
;       MOV     R2,-(SP)    ; PC
;       MOV     #ICAFMT,-(SP)
;       MOV     #STDOUT,-(SP)
;       JSR     PC,FPRNTF
;       ADD     #24,SP
;       BR      ICAXXX
;ICAFMT: .ASCII  /%u: ADD %li, %li -> %li (MODES: %u)/
;       .BYTE   15,12,0
;       .EVEN
;ICAXXX:
        MOV     12(SP),R5       ; R5 <- PC
        MOV     14(SP),R2       ; R2 <- MEM
        MOV     16(SP),R3       ; R3 <- MODES

        SUB     #4,SP           ; LOCALS
                                ; 2(SP): LO(RESULT)
                                ;  (SP): HI(RESULT)

        MOV     R3,-(SP)        ; MODE <- MODES
        MOV     R2,-(SP)        ; MEM <- MEM
        MOV     R5,-(SP)        ; PC <- PC
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        INC     (SP)            ; INCREMENT PC ON STACK FOR NEXT READ
        MOV     R1,10(SP)       ; LO(RESULT) <- LO(ADDEND)
        MOV     R0,6(SP)        ; HI(RESULT) <- HI(ADDEND)
        JSR     PC,ICREAD       ; ICREAD(PC,MEM)
        ADD     #6,SP           ; CLEAN UP STACK
        ADD     R1,2(SP)        ; LO(RESULT) += LO(ADDEND)
        ADC     (SP)            ; ADD CARRY TO HI(RESULT)
        ADD     R0,(SP)         ; HI(RESULT) += HI(ADDEND)
        ADD     #2,R5           ; INCREMENT THE PC BY 2

        MOV     2(SP),-(SP)     ; LO(VALUE) <- LO(RESULT)
        MOV     2(SP),-(SP)     ; HI(VALUE) <- HI(RESULT)
        MOV     R2,-(SP)        ; MEM <- MEM
        MOV     R5,-(SP)        ; PC <- PC
        JSR     PC,ICWRIT       ; ICWRIT(PC,MEM,HI(VALUE),LO(VALUE))
        ADD     #10,SP          ; CLEAN UP STACK
        INC     R5              ; INCREMENT PC

        MOV     R5,R0           ; RETURN NEXT PC

        ADD     #4,SP           ; CLEAN UP LOCALS
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER
;
; ICMUL(PC,MEM,MODES)
;
ICMUL:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

        ; DEBUG
;       MOV     14(SP),R2       ; R2 <- PC
;       DEC     R2
;       MOV     14(SP),R4       ; R4 <- PC
;       ASL     R4
;       ASL     R4
;       ADD     #MEM,R4
;
;       MOV     20(SP),-(SP)    ; MODES
;       MOV     12(R4),-(SP)     ; DEST
;       MOV     10(R4),-(SP)     ; DEST
;       MOV     6(R4),-(SP)      ; PARAM 2
;       MOV     4(R4),-(SP)      ; PARAM 2
;       MOV     2(R4),-(SP)      ; PARAM 1
;       MOV     (R4),-(SP)      ; PARAM 1
;       MOV     R2,-(SP)    ; PC
;       MOV     #ICMFMT,-(SP)
;       MOV     #STDOUT,-(SP)
;       JSR     PC,FPRNTF
;       ADD     #24,SP
;       BR      ICMXXX
;ICMFMT: .ASCII  /%u: MUL %li, %li -> %li (MODES: %u)/
;       .BYTE   15,12,0
;       .EVEN
;ICMXXX:
        MOV     14(SP),R5       ; R5 <- PC
        MOV     16(SP),R2       ; R2 <- MEM
        MOV     20(SP),R3       ; R3 <- MODES

        SUB     #10,SP          ; LOCALS
                                ; 6(SP): LO(MULTIPLIER)
                                ; 4(SP): HI(MULTIPLIER)
                                ; 2(SP): LO(MULTIPLICAND)
                                ;  (SP): HI(MULTIPLICAND)

        MOV     R3,-(SP)        ; MODE <- MODES
        MOV     R2,-(SP)        ; MEM <- MEM
        MOV     R5,-(SP)        ; PC <- PC
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        INC     (SP)            ; INCREMENT PC ON STACK FOR NEXT READ
        MOV     R1,10(SP)       ; LO(MULTIPLICAND) <- R1
        MOV     R0,6(SP)        ; HI(MULTIPLICAND) <- R0
        JSR     PC,ICREAD       ; ICREAD(PC,MEM)
        MOV     R1,14(SP)       ; LO(MULTIPLIER) <- R1
        MOV     R0,12(SP)       ; HI(MULTIPLIER) <- R0
        ADD     #6,SP           ; CLEAN UP STACK
        ADD     #2,R5           ; INCREMENT THE PC BY 2

        MOV     6(SP),-(SP)     ; LO(MULTIPLIER)
        MOV     6(SP),-(SP)     ; HI(MULTIPLIER)
        MOV     6(SP),-(SP)     ; LO(MULTIPLICAND)
        MOV     6(SP),-(SP)     ; HI(MULTIPLICAND)
        JSR     PC,MULPS        ; MULPS(H,L,H,L)
        ADD     #10,SP          ; CLEAN UP STACK

        MOV     R1,-(SP)        ; LO(VALUE) <- LO(PRODUCT)
        MOV     R0,-(SP)        ; HI(VALUE) <- HI(PRODUCT)
        MOV     R2,-(SP)        ; MEM <- MEM
        MOV     R5,-(SP)        ; PC <- PC
        JSR     PC,ICWRIT       ; ICWRIT(PC,MEM,VALUE)
        ADD     #10,SP          ; CLEAN UP STACK
        INC     R5              ; INCREMENT PC

        MOV     R5,R0           ; RETURN NEXT PC

        ADD     #10,SP          ; DEALLOCATE LOCALS
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER
;
; ICIN(PC,MEM,MODES)
;
ICIN:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R5,-(SP)        ; SAVE R5

        MOV     10(SP),R5       ; R5 <- PC
        MOV     12(SP),R2       ; R2 <- MEM

        MOV     #STDIN,-(SP)    ; STREAM <- STDIN
        JSR     PC,PRSWU        ; PRSWU(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK

        MOV     R1,-(SP)        ; LO(VALUE) <- R1
        MOV     R0,-(SP)        ; HI(VALUE) <- R0
        MOV     R2,-(SP)        ; MEM <- R2
        MOV     R5,-(SP)        ; PC <- R5
        JSR     PC,ICWRIT       ; ICWRIT(PC,MEM,HI(VALUE),LO(VALUE)
        ADD     #10,SP          ; CLEAN UP STACK
        INC     R5              ; INCREMENT PC

        MOV     R5,R0           ; RETURN PC

        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER
;
; ICOUT(PC,MEM,MODES)
;
ICOUT:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R5,-(SP)        ; SAVE R5

        ; DEBUG
;       MOV     6(SP),R2
;       DEC     R2
;       MOV     6(SP),R5
;       ASL     R5
;       ASL     R5
;       ADD     10(SP),R5
;
;       MOV     12(SP),-(SP)
;       MOV     2(R5),-(SP)
;       MOV     (R5),-(SP)
;       MOV     R2,-(SP)
;       MOV     #ICOFMT,-(SP)
;       MOV     #STDOUT,-(SP)
;       JSR     PC,FPRNTF
;       ADD     #14,SP
;       BR      ICOXXX
;ICOFMT: .ASCII  /%u: OUT %lu (MODES: %u)/
;       .BYTE   15,12,0
;       .EVEN
;ICOXXX:

        MOV     6(SP),R5        ; R5 <- PC
        MOV     10(SP),R2       ; R2 <- MEM

        MOV     12(SP),-(SP)    ; MODES <- MODES
        MOV     R2,-(SP)        ; MEM <- R2
        MOV     R5,-(SP)        ; PC <- R5
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODE)
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     R1,-(SP)        ; ARG1 <- R1
        MOV     R0,-(SP)        ; ARG0 <- R0
        MOV     #ICOUTF,-(SP)   ; FORMAT <- ICOUTF
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM,FORMAT,...)
        ADD     #10,SP          ; CLEAN UP STACK
        INC     R5              ; INCREMENT PC

        MOV     R5,R0           ; RETURN PC

        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER
ICOUTF: .ASCII  /%li/
        .BYTE   15,12,0
        .EVEN

;
; ICJIT(PC,MEM,MODES)
;
; IF FIRST PARAMETER IS NON-ZERO, PC = SECOND PARAMETER
;
ICJIT:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     10(SP),-(SP)    ; MODES <- MODES
        MOV     10(SP),-(SP)    ; MEM <- MEM
        MOV     10(SP),-(SP)    ; PC <- PC
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        TST     R1              ; CHECK LO VALUE
        BNE     ICJIT1          ; NO, JUMP
        TST     R0              ; CHECK HI VALUE
        BNE     ICJIT1          ; NO, JUMP
        ADD     #6,SP           ; CLEAN UP STACK
        MOV     4(SP),R0        ; R0 <- PC
        ADD     #2,R0           ; SKIP TO NEXT INSTRUCTION
        BR      ICJIT9          ; WE'RE DONE
ICJIT1: INC     (SP)            ; PC <- SECOND ARG
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        ADD     #6,SP           ; CLEAN UP STACK
        MOV     R1,R0           ; NEXT INSTRUCTION IS IN R1
ICJIT9: MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; ICJIF(PC,MEM,MODES)
;
; IF FIRST PARAMETER IS ZERO, PC = SECOND PARAMETER
;
ICJIF:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     10(SP),-(SP)    ; MODES <- MODES
        MOV     10(SP),-(SP)    ; MEM <- MEM
        MOV     10(SP),-(SP)    ; PC <- PC
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        TST     R1              ; CHECK LO VALUE
        BNE     ICJIF1          ; NO, JUMP
        TST     R0              ; CHECK HI VALUE
        BNE     ICJIF1          ; NO, JUMP
        INC     (SP)            ; PC <- SECOND ARG
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        ADD     #6,SP           ; CLEAN UP STACK
        MOV     R1,R0           ; NEXT INSTRUCTION IS IN R1
        BR      ICJIF9          ; WE'RE DONE
ICJIF1: ADD     #6,SP           ; CLEAN UP STACK
        MOV     4(SP),R0        ; R0 <- PC
        ADD     #2,R0           ; SKIP TO NEXT INSTRUCTION
ICJIF9: MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; ICLT(PC,MEM,MODES)
;
; IF FIRST PARAM LESS THAN SECOND, STORE 1 IN THIRD PARAM
;
ICLT:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        MOV     14(SP),-(SP)    ; MODES <- MODES
        MOV     14(SP),-(SP)    ; MEM <- MEM
        MOV     14(SP),-(SP)    ; PC <- PC
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        INC     (SP)            ; INCREMENT PC FOR NEXT READ
        MOV     R1,R3           ; R3 <- LO
        MOV     R0,R2           ; R2 <- HI
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        ADD     #6,SP           ; CLEAN UP STACK

        CMP     R2,R0           ; COMPARE HI WORDS
        BLT     ICLT1           ; IF LESS THAN, RETURN 1
        BGT     ICLT0           ; IF GREATER THAN, RETURN 0

        CMP     R3,R1           ; HI IS EQUAL, COMPARE LO WORDS
        BLT     ICLT1           ; IF LESS THAN, RETURN 1
ICLT0:  CLR     R3              ; OTHERWISE, RETURN 0
        BR      ICLT2           ; SKIP AHEAD
ICLT1:  MOV     #1,R3           ; RETURN 1
ICLT2:  MOV     10(SP),R2       ; R2 <- PC
        ADD     #2,R2           ; R2 <- WRITE POSITION

        MOV     R3,-(SP)        ; LO <- R3
        CLR     -(SP)           ; HI <- 0
        MOV     16(SP),-(SP)    ; MEM <- MEM
        MOV     R2,-(SP)        ; PC <- R2
        JSR     PC,ICWRIT       ; ICWRIT(PC,MEM,HI,LO)
        ADD     #10,SP          ; CLEAN UP STACK
        MOV     10(SP),R0       ; R0 <- PC
        ADD     #3,R0           ; MOVE PC TO NEXT INSTRUCTION
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; ICEQ(PC,MEM,MODES)
;
; IF FIRST PARAM EQUALS SECOND, STORE 1 IN THIRD PARAM
;
ICEQ:
        MOV     R2,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        MOV     14(SP),-(SP)    ; MODES <- MODES
        MOV     14(SP),-(SP)    ; MEM <- MEM
        MOV     14(SP),-(SP)    ; PC <- PC
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        INC     (SP)            ; INCREMENT PC FOR NEXT READ
        MOV     R1,R3           ; R3 <- LO
        MOV     R0,R2           ; R2 <- HI
        JSR     PC,ICREAD       ; ICREAD(PC,MEM,MODES)
        ADD     #6,SP           ; CLEAN UP STACK
        CMP     R1,R3           ; ARE THE LO WORDS EQUAL?
        BNE     ICEQ1           ; NO, SKIP AHEAD
        CMP     R0,R2           ; ARE THE HI WORDS EQUAL?
        BNE     ICEQ1           ; NO SKIP ADEAD
        MOV     #1,R3           ; SET VALUE TO WRITE TO 1
        BR      ICEQ2           ; SKIP AHEAD
ICEQ1:  CLR     R3              ; SET VALUE TO WRITE TO 0
ICEQ2:  MOV     10(SP),R2       ; R2 <- PC
        ADD     #2,R2           ; R2 <- WRITE POSITION

        MOV     R3,-(SP)        ; LO <- R3
        CLR     -(SP)           ; HI <- 0
        MOV     16(SP),-(SP)    ; MEM <- MEM
        MOV     R2,-(SP)        ; PC <- R2
        JSR     PC,ICWRIT       ; ICWRIT(PC,MEM,HI,LO)
        ADD     #10,SP          ; CLEAN UP STACK
        MOV     10(SP),R0       ; R0 <- PC
        ADD     #3,R0           ; MOVE PC TO NEXT INSTRUCTION
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER


;
; FSTRTL(STREAM) -> R0: HI, R1: LO
;
; CONVERT A SIGNED DECIMAL STRING TO A LONG INTEGER (DOUBLE WORD)
;
FSTRTL:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

                                ; LOCALS
        CLR     -(SP)           ; (SP): NEGATIVE FLAG

        MOV     14(SP),R2       ; R2 <- STREAM
        CLR     R4              ; R4 <- HI
        CLR     R5              ; R5 <- LO

        MOV     R2,-(SP)        ; STREAM <- STREAM
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
        CMP     #'+,R0          ; IF IT'S A PLUS
        BEQ     FSTRT7          ;   SKIP IT, READ NEXT CHAR.
        CMP     #'-,R0          ; IF IT'S NOT A MINUS
        BNE     FSTRT1          ;   SKIP AHEAD
        INC     (SP)            ; SET THE NEGATIVE FLAG
        BR      FSTRT7          ; READ NEXT CHAR

FSTRT1: CMP     #'0,R0          ; IF IT'S LESS THAN ZERO
        BGT     FSTRT8          ;   WE'RE DONE
        CMP     #'9,R0          ; IF IT'S GREATER THAN NINE
        BLT     FSTRT8          ;   WE'RE DONE
        SUB     #'0,R0          ; ASCII -> NUMBER
        MOV     R0,R3           ; REMEMBER IT

        MOV     #12,-(SP)       ; MULTIPLIER LO <- 10(10)
        CLR     -(SP)           ; MULTIPLIER HI <- 0
        MOV     R5,-(SP)        ; MULTIPLICAND LO <- R5
        MOV     R4,-(SP)        ; MULTIPLICAND HI <- R4
        JSR     PC,MULPU        ; MULPU (M'CAND HI, LO, M'PLIER HI, LO)
        ADD     #10,SP          ; CLEAN UP STACK
        MOV     R0,R4           ; R4 <- RESULT HI
        MOV     R1,R5           ; R5 <- RESULT LO
        ADD     R3,R5           ; ADD R3 TO RESULT LO
        ADC     R4              ; ADD CARRY TO RESULT HI

FSTRT7: MOV     R2,-(SP)        ; STREAM <- STREAM
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
        BR      FSTRT1

FSTRT8:
        MOV     R2,-(SP)        ; STREAM <- STREAM
        MOV     R0,-(SP)        ; C <- STREAM
        JSR     PC,UNGETC       ; UNGETC(C, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        TST     (SP)            ; CHECK THE NEGATIVE FLAG
        BEQ     FSTRT9          ; NOT NEGATIVE, SKIP NEGATION
        COM     R4              ; COMPLIMENT THE HI WORD
        NEG     R5              ; TWO'S COMPLIMENT TO LO WORD

FSTRT9:
        MOV     R4,R0           ; SET RETURN VALUE HI
        MOV     R5,R1           ; SET RETURN VALUE LO
        CLR     (SP)+           ; CLEAN UP LOCAL
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

        .EVEN
MEM:    .=.+10000                ; 1024(10) MEMORY LOCATIONS

