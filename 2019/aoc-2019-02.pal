; ADVENT OF CODE 2019: DAY 2
; 1202 PROGRAM ALARM
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK
        SUB     #2,SP           ; LOCAL VARS:
                                ;   0(SP): END OF IC

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #BANNER,-(SP)   ; S = BANNER
        JSR     PC,FPUTS         ; FPUTS(S, STDOUT)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     #PTIN,-(SP)     ; PUSH PTIN
        MOV     #IC,-(SP)       ; PUSH INTCODE START ADDRESS
        JSR     PC,ICLOAD       ; ICLOAD(IC, PTIN)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,(SP)         ; STORE END OF PROGRAM ADDRESS

        MOV     #ICCOPY,-(SP)   ; PUSH DESTINATION
        MOV     2(SP),-(SP)     ; PUSH END
        MOV     #IC,-(SP)       ; PUSH START
        JSR     PC,COPY         ; COPY
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     #14,ICCOPY+6    ; PER INSTRUCTIONS, SET 1 TO 12(10)
        MOV     #2,ICCOPY+12    ; PER INSTRUCTIONS, SET 2 TO 2

        MOV     #ICCOPY,-(SP)   ; PUSH INTCODE START ADDRESS
        JSR     PC,ICRUN        ; RUN INTCODE
        CLR     (SP)+           ; CLEAN STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #PART1,-(SP)    ; S = PART1
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; PUSH STDOUT
        MOV     ICCOPY+2,-(SP)  ; PUSH LO WORD OF PART 1
        MOV     ICCOPY,-(SP)    ; PUSH HI WORD OF PART 1
        JSR     PC,FMTDU        ; OUTPUT THE PART 1 SOLUTION
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #CRLF,-(SP)     ; S = CRLF
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        CLR     R1              ; R1 <- NOUN
        CLR     R2              ; R2 <- VERB

S0:     MOV     #ICCOPY,-(SP)   ; PUSH DESTINATION
        MOV     2(SP),-(SP)     ; PUSH END
        MOV     #IC,-(SP)       ; PUSH START
        JSR     PC,COPY         ; COPY
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     R1,ICCOPY+6     ; PER INSTRUCTIONS, SET 1 TO 12(10)
        MOV     R2,ICCOPY+12    ; PER INSTRUCTIONS, SET 2 TO 2

        MOV     #ICCOPY,-(SP)   ; PUSH INTCODE START ADDRESS
        JSR     PC,ICRUN        ; RUN INTCODE
        CLR     (SP)+           ; CLEAN STACK

        CMP     #000454,ICCOPY  ; IS HI WORD HI(19690720(10))?
        BNE     S1
        CMP     #072340,ICCOPY+2; IS LO WORD LO(19690720(10))?
        BEQ     S2
S1:
        INC     R1              ; INCREMENT NOUN
        CMP     #144,R1         ; IS IT 100(10)?
        BNE     S0              ; IF NOT, NEXT
        CLR     R1              ; IF SO, NOUN <- 0
        INC     R2              ; INCREMENT VERB
        CMP     #144,R2         ; IS IT 100(10)?
        BNE     S0              ; IF NOT, NEXT
        HALT                    ; DIDN'T FIND OUR VALUE, GIVE UP
S2:
        MOV     R1,-(SP)        ; PUSH NOUN
        MOV     #144,-(SP)      ; PUSH 100(10)
        JSR     PC,MULWU        ; MULTIPLY
        ADD     #4,SP           ; CLEAN STACK
        ADD     R2,R1           ; ADD VERB, NOW R1 IS OUR SOLUTION

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #PART2,-(SP)    ; S = PART2
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; PUSH STDOUT
        MOV     R1,-(SP)        ; PUSH LO WORD OF PART 2
        CLR     -(SP)           ; PUSH HI WORD (0) OF PART 1
        JSR     PC,FMTDU        ; OUTPUT THE PART 1 SOLUTION
        ADD     #6,SP           ; CLEAN UP STACK

        MOV     #STDOUT,-(SP)   ; STREAM = STDOUT
        MOV     #CRLF,-(SP)     ; S = CRLF
        JSR     PC,FPUTS        ; FPUTS(S, STREAM)
        ADD     #4,SP           ; CLEAN UP STACK

        ADD     #2,SP           ; DEALLOCATE LOCALS
        HALT                    ; PROGRAM COMPLETE
        JMP      START          ; RESTART ON CONTINUE

;
; ICLOAD(ADDRESS, STREAM) -> R0: END ADDRESS
;
; LOAD INTCODE INTO MEMORY AT THE GIVEN ADDRESS FROM THE STREAM
;
ICLOAD:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     10(SP),R3       ; R3 <- ADDRESS
        MOV     12(SP),R2       ; R2 <- STREAM
ICL0:
        MOV     R2,-(SP)        ; PUSH STREAM
        JSR     PC,PRSWU        ; PRSWU (STREAM)
        BCS     ICL1            ; IF CARRY SET, DONE
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,(R3)+        ; STORE VALUE HI
        MOV     R1,(R3)+        ; STORE VALUE LO
        MOV     R2,-(SP)        ; STREAM = R2
        JSR     PC,FGETC        ; FGETC(STREAM)
        CLR     (SP)+           ; CLEAN UP STACK
        BR      ICL0            ; NEXT VALUE

ICL1:   TST     (SP)+           ; CLEAN UP STACK FROM LAST PRSWU  CALL
        MOV     R3,R0           ; RETURN THE ADDRESS AFTER THE INTCODE
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER


;
; ICGET(BASE, POS) -> R0: VALUE HI, R1: VALUE LO
;
; GET THE INTCODE VALUE AT THE GIVEN POSITION
;
ICGET:
        MOV     R3,-(SP)        ; SAVE R3

        MOV     6(SP),R3        ; R3 <- POS
        ASL     R3              ; MULTIPLY BY FOUR
        ASL     R3              ; TO GET THE ADDRESS OFFSET
        ADD     4(SP),R3        ; ADD THE BASE ADDRESS
        MOV     (R3),R0         ; R0 <- VALUE HI
        MOV     2(R3),R1        ; R1 <- VALUE LO

        MOV     (SP)+,R3        ; RESTORE R3
        RTS     PC

;
; ICGETD(BASE, POS) -> R0: VALUE HI, R1: VALUE LO
;
; GET THE INTCODE VALUE AT THE POSITION AT THE GIVEN POSITION
;
ICGETD:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        MOV     6(SP),R2        ; R2 <- BASE
        MOV     10(SP),R3       ; R3 <- POS

        MOV     R3,-(SP)        ; PUSH POS
        MOV     R2,-(SP)        ; PUSH BASE
        JSR     PC,ICGET        ; GET THE VALUE AT POS
        MOV     R1,2(SP)        ; CHANGE POS TO VALUE LO
        JSR     PC,ICGET        ; GET THE VALUE AT POS
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC

;
; ICSET(BASE, POS, HI, LO)
;
; SET THE INTCODE VALUE AT THE POSITION
;
ICSET:
        MOV     R3,-(SP)        ; SAVE R3

        MOV     6(SP),R3        ; R3 <- POS
        ASL     R3              ; MULTIPLY BY FOUR
        ASL     R3              ; TO GET THE ADDRESS OFFSET
        ADD     4(SP),R3        ; ADD THE BASE ADDRESS
        MOV     10(SP),(R3)     ; SET VALUE HI
        MOV     12(SP),2(R3)    ; SET VALUE LO

        MOV     (SP)+,R3        ; RESTORE R3
        RTS     PC

; ICSETD(BASE, POS, HI, LO)
;
; SET THE INTCODE VALUE AT THE POSITION AT THE GIVEN POSITION
;
ICSETD:
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        MOV     6(SP),R2        ; R2 <- BASE
        MOV     10(SP),R3       ; R3 <- POS

        MOV     R3,-(SP)        ; PUSH POS
        MOV     R2,-(SP)        ; PUSH BASE
        JSR     PC,ICGET        ; GET THE VALUE AT POS
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     14(SP),-(SP)    ; PUSH LO
        MOV     14(SP),-(SP)    ; PUSH HI
        MOV     R1,-(SP)        ; PUSH POS (LO PART OF ICGET VALUE)
        MOV     R2,-(SP)        ; PUSH BASE
        JSR     PC,ICSET        ; SET IT
        ADD     #10,SP          ; CLEAN UP STACK

        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC

;
; ICRUN(ADDRESS)
;
; RUN THE INTCODE PROGRAM AT THE GIVEN ADDRESS
;
ICRUN:
        MOV     R0,-(SP)        ; SAVE R0
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5

        MOV     16(SP),R3       ; R3 <- BASE ADDRESS
        CLR     R2              ; R2 <- INTCODE PC
ICR0:
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE ADDRESS
        JSR     PC,ICGET        ; GET THE VALUE AT POS
        ADD     #4,SP           ; CLEAN UP STACK
        INC     R2              ; INCREMENT PC
        CMP     #1,R1           ; IS OPCODE 1 (ADD)?
        BEQ     ICADD           ; DO ADD
        CMP     #2,R1           ; IS OPCODE 2 (MUL)?
        BEQ     ICMUL           ; DO MUL
        CMP     #143,R1         ; IS OPCODE 99(10) (HALT)?
        BEQ     ICHALT          ; DO HALT
        HALT                    ; ILLEGAL OPCODE

ICADD:
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE
        JSR     PC,ICGETD       ; GET DEFERRED
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R5           ; STASH LO
        MOV     R0,R4           ; STASH HI
        INC     R2              ; INCREMENT PC TO SECOND ARG
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE
        JSR     PC,ICGETD       ; GET DEFERRED
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R1,R5           ; ADD VALUE LO
        ADC     R0              ; ADD CARRY TO HI
        ADD     R0,R4           ; ADD VALUE HI
        INC     R2              ; INCREMENT PC TO DESTINATION ARG
        MOV     R5,-(SP)        ; PUSH LO
        MOV     R4,-(SP)        ; PUSH HI
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE
        JSR     PC,ICSETD       ; SET DEFERRED
        ADD     #10,SP          ; CLEAN UP STACK
        INC     R2              ; INCREMENT PC TO NEXT INSTRUCTION
        BR      ICR0            ; NEXT INSTRUCTION

ICMUL:
        ; USE A PARTIAL MULTIPLY: TAKE LOWER 32 BITS
        ; OF A 32 BIT TIMES 32 BIT VALUE:
        ;
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE
        JSR     PC,ICGETD       ; GET DEFERRED
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R1,R5           ; STASH LO
        MOV     R0,R4           ; STASH HI
        INC     R2              ; INCREMENT PC TO SECOND ARG
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE
        JSR     PC,ICGETD       ; GET DEFERRED
        ADD     #4,SP           ; CLEAN UP STACK

        MOV     R5,-(SP)        ; PUSH MULTIPLIER LO
        MOV     R4,-(SP)        ; PUSH MULTIPLIER HI
        MOV     R1,-(SP)        ; PUSH MULTIPLICAND LO
        MOV     R0,-(SP)        ; PUSH MULTIPLICAND HI
        JSR     PC,MULPU        ; PARTIAL MULTIPLY
        ADD     #10,SP          ; CLEAN UP STACK

        INC     R2              ; INCREMENT PC TO DESTINATION ARG
        MOV     R1,-(SP)        ; PUSH LO
        MOV     R0,-(SP)        ; PUSH HI
        MOV     R2,-(SP)        ; PUSH POS
        MOV     R3,-(SP)        ; PUSH BASE
        JSR     PC,ICSETD       ; SET DEFERRED
        ADD     #10,SP          ; CLEAN UP STACK
        INC     R2              ; INCREMENT PC TO NEXT INSTRUCTION
        BR      ICR0            ; NEXT INSTRUCTION

ICHALT:
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        MOV     (SP)+,R0        ; RESTORE R0

        RTS     PC

;
; STATIC DATA
;
BANNER: .ASCII  "ADVENT OF CODE 2019 DAY 2"
CRLF:   .BYTE   15,12,0         ; CR,LF
PART1:  .ASCII  "PART 1: "
        .BYTE   0
PART2:  .ASCII  "PART 2: "
        .BYTE   0


        .EVEN
IC:     .=.+2000                ; INTCODE PROGRAM ADDRESS
ICCOPY: .=.+2000                ; INTCODE COPY ADDRESS

