; ADVENT OF CODE 2019: DAY 6
; UNIVERSAL ORBIT MAP
;
; THIS PROGRAM CAN BE ASSEMBLED BY PAL-11A AND CAN BE RUN ON ANY
; PDP-11 SYSTEM WITH A HIGH-SPEED PAPER TAPE READER.
;
; INPUT:  PAPER TAPE
; OUTPUT: TTY
;
; START ADDRESS: 1000
;

;
; SET UP REGISTER AND DEVICE LABELS
;
        R0=     %0              ; REGISTER 0
        R1=     %1              ; REGISTER 1
        R2=     %2              ; REGISTER 2
        R3=     %3              ; REGISTER 3
        R4=     %4              ; REGISTER 4
        R5=     %5              ; REGISTER 5
        SP=     %6              ; STACK POINTER
        PC=     %7              ; PROGRAM COUNTER

;
; START OF PROGRAM
;
        .=      1000            ; ASSEMBLE AT ADDRESS 1000
START:  MOV     #.,SP           ; SET UP STACK

        SUB     #4,SP           ; LOCALS:
                                ; 0(SP): TREE
                                ; 2(SP): ARRAY OF ORBITS

        MOV     #BANNER,-(SP)   ; FORMAT <- BANNER
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT)
        ADD     #4,SP           ; CLEAN UP STACK

        JSR     PC,TALLOC       ; TALLOC()
        MOV     R0,(SP)         ; TREE <- RESULT

        MOV     #17000,-(SP)    ; SIZE <- 2400(8) * 6
        JSR     PC,MALLOC       ; MALLOC(SIZE)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,2(SP)        ; ARRAY OF ORBITS <- R0
        MOV     R0,R4           ; R4 <- NEXT ELEMENT TO WRITE

        MOV     #12445,(R4)+    ; FIRST ELEMENT KEY <- R50(COM)
        CLR     (R4)+           ; FIRST ELEMENT PARENT <- NULL
        CLR     (R4)+           ; FIRST ELEMENT DISTANCE <- 0

        MOV     R0,-(SP)        ; DATA <- FIRST ELEMENT
        MOV     #12455,-(SP)    ; KEY <- R50(COM)
        MOV     4(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TPUT         ; TPUT(TREE,KEY,DATA)
        ADD     #6,SP           ; CLEAN UP STACK

START1:
        JSR     PC,READPT       ; READPT()
        BCS     START2          ; IF DONE, SKIP AHEAD

        MOV     R0,(R4)         ; KEY <- CHLID KEY
        MOV     R1,2(R4)        ; PARENT <- PARENT KEY
        MOV     #-1,4(R4)       ; DISTANCE TO COM <- -1

        MOV     R4,-(SP)        ; DATA <- ELEMENT
        MOV     R0,-(SP)        ; KEY <- CHILD KEY
        MOV     4(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TPUT         ; TPUT(TREE,KEY,DATA)
        ADD     #6,SP           ; CLEAN UP STACK

        ADD     #6,R4           ; MOVE TO NEXT ELEMENT
        BR      START1          ; NEXT LINE
START2:
        CLR     (R4)            ; LAST ELEMENT KEY <- 0

        MOV     2(SP),R4        ; START AT THE BEGINNING
        CLR     R2              ; CLEAR COUNT(LO)
        CLR     R3              ; CLEAR COUNT(HI)
START3:
        TST     (R4)            ; CHECK THE ELEMENT KEY
        BEQ     START4          ; IF NULL, SKIP OUT OF LOOP

        MOV     (SP),-(SP)      ; TREE <- TREE
        MOV     R4,-(SP)        ; ELEMENT <- ELEMENT
        JSR     PC,DIST         ; DIST(ELEMENT,TREE)
        ADD     #4,SP           ; CLEAN UP STACK
        ADD     R0,R2           ; ADD DISTANCE TO THE COUNT
        ADC     R3              ; ADD CARRY

        ADD     #6,R4           ; POINT TO NEXT ELEMENT
        BR      START3          ; NEXT ELEMENT
START4:
        MOV     R2,-(SP)        ; ARG1 <- R2
        MOV     R3,-(SP)        ; ARG0 <- R3
        MOV     #PART1,-(SP)    ; FORMAT <- PART1
        MOV     #STDOUT,-(SP)   ; STREAM < STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM,FORMAT,...)
        ADD     #10,SP          ; CLEAN UP STACK

        ; PART 2:
        ;  IF YOU.DISTANCE > SAN.DISTANCE
        ;    YOU = YOU.PARENT; INCREMENT COUNT
        ;  IF YOU.DISTANCE < SAN.DISTANCE
        ;    SAN = SAN.PARENT; INCREMENT COUNT
        ;  IF YOU.DISTANCE = SAN.DISTANCE AND YOU != SAN
        ;    YOU = YOU.PARENT; INCREMENT COUNT
        ;    SAN = SAN.PARENT; INCREMENT COUNT
        MOV     #-2,R2          ; START COUNT AT MINUS TWO
                                ;   (SINCE WE DON'T COUNT SAN AND YOU)
        MOV     #117255,-(SP)   ; KEY <- R50(YOU)
        MOV     2(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R3           ; R3 <- YOU

        MOV     #73366,-(SP)    ; KEY <- R50(SAN)
        MOV     2(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R4           ; R4 <- SAN

START5:
        CMP     4(R3),4(R4)     ; COMPARE DISTANCES
        BGT     START6          ; IF GREATER, SKIP AHEAD
        BEQ     START7          ; IF EQUAL, SKIP AHEAD
        ; HERE, YOU.DISTANCE IS LESS THAN SAN.DISTANCE
        MOV     2(R4),-(SP)     ; KEY <- SAN.PARENT
        MOV     2(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R4           ; SAN <- SAN.PARENT
        INC     R2              ; INCREMENT COUNT
        BR      START5          ; NEXT!
START6: ; HERE, YOU.DISTANCE IS GREATER THAN SAN.DISTANCE
        MOV     2(R3),-(SP)     ; KEY <- YOU.PARENT
        MOV     2(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R3           ; YOU <- YOU.PARENT
        INC     R2              ; INCREMENT COUNT
        BR      START5          ; NEXT!
START7: ; HERE, YOU.DISTANCE IS EQUAL TO SAN.DISTANCE
        CMP     R3,R4           ; ARE THEY THE SAME?
        BEQ     START8          ; YES, WE'RE DONE
        MOV     2(R4),-(SP)     ; KEY <- SAN.PARENT
        MOV     2(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R4           ; SAN <- SAN.PARENT
        MOV     2(R3),-(SP)     ; KEY <- YOU.PARENT
        MOV     2(SP),-(SP)     ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R3           ; YOU <- YOU.PARENT
        INC     R2              ; INCREMENT COUNT
        INC     R2              ; INCREMENT COUNT
        BR      START7          ; NEXT!
START8:
        MOV     R2,-(SP)        ; ARG0 <- COUNT
        MOV     #PART2,-(SP)    ; FORMAT <- PART2
        MOV     #STDOUT,-(SP)   ; STREAM <- STDOUT
        JSR     PC,FPRNTF       ; FPRNTF(STREAM, FORMAT, ...)
        ADD     #6,SP           ; CLEAN UP STACK

START9:
        ADD     #4,SP           ; CLEAN UP LOCALS
        HALT                    ; END OF PROGRAM
        JMP     START           ; START OVER

BANNER: .ASCII /ADVENT OF CODE 2019 DAY 6/
        .BYTE  15,12,0
PART1:  .ASCII /PART 1: %lu/
        .BYTE  15,12,0
PART2:  .ASCII /PART 2: %u/
        .BYTE  15,12,0
        .EVEN
;
; DIST(ELEMENT, TREE)
;
; FIND THE DISTANCE OF THE ELEMENT TO COM
;
DIST:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3
        MOV     R4,-(SP)        ; SAVE R4
        MOV     R5,-(SP)        ; SAVE R5
        MOV     14(SP),R1       ; R1 <- ELEMENT
        MOV     16(SP),R2       ; R2 <- TREE
        CLR     R3              ; R3 <- STACK DEPTH (0)
        MOV     #4000,-(SP)     ; SIZE <- 4000(8)
        JSR     PC,MALLOC       ; MALLOC(SIZE)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,R4           ; R4 <- ELEMENT STACK
        MOV     #4000,R5        ; R5 <- ELEMENT STACK POINTER
        ADD     R4,R5           ;

DIST1:
        MOV     4(R1),R0        ; CHECK THE DISTANCE
        BPL     DIST8           ; IF IT'S POSITIVE, WE'RE DONE
        MOV     R1,-(R5)        ; PUSH THIS ELEMENT
        INC     R3              ; INCREMENT STACK DEPTH
        MOV     2(R1),-(SP)     ; KEY <- PARENT
        MOV     R2,-(SP)        ; TREE <- TREE
        JSR     PC,TGET         ; TGET(TREE,KEY)
        ADD     #4,SP           ; CLEAN UP STACK
        MOV     R0,R1           ; THIS IS OUR NEW ELEMENT
        BR      DIST1           ; CHECK THE DISTANCE

DIST8:
        TST     R3              ; CHECK STACK DEPTH
        BEQ     DIST9           ; IF ZERO, WE'RE DONE
        INC     R0              ; INCREMENT THE DISTANCE
        DEC     R3              ; DECREMENT THE STACK DEPTH
        MOV     (R5)+,R1        ; POP AN ELEMENT
        MOV     R0,4(R1)        ; SET ITS DISTANCE
        BR      DIST8           ; CHECK THE NEXT ELEMENT ON THE STACK
DIST9:
        MOV     R4,-(SP)        ; BLOCK <- R4
        JSR     PC,FREE         ; FREE(BLOCK)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     (SP)+,R5        ; RESTORE R5
        MOV     (SP)+,R4        ; RESTORE R4
        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER

;
; READPT(): R0: ORBITER, R1: ORBITEE
;
; READ A LINE FROM PAPER TAPE
; SET CARRY ON ERROR
;
READPT:
        MOV     R2,-(SP)        ; STASH R2
        SUB     #4,SP           ; LOCALS
                                ; 0: BUFFER

        MOV     SP,R2           ; R2 <- BUFFER
        MOV     #4,-(SP)        ; NBYTE <- 4
        MOV     R2,-(SP)        ; BUF <- BUFFER
        MOV     #3,-(SP)        ; FILEDES <- 3 (PTIN)
        JSR     PC,READ         ; READ(FILEDES, BUF, NBYTE)
        CMP     #4,R0           ; DID WE READ FOUR BYTES?
        BNE     READP7          ; NO, BAIL OUT
        MOV     R2,-(SP)        ; S <- BUFFER
        JSR     PC,STOR50       ; STOR50(S)
        TST     (SP)+           ; CLEAN UP STACK
        MOV     R0,R1           ; SAVE ORBITEE

        JSR     PC,READ         ; READ(FILEDES, BUF, NBYTE)
        CMP     #4,R0           ; DID WE READ FOUR BYTES?
        BNE     READP7          ; NO, BAIL OUT
        ADD     #6,SP           ; CLEAN UP STACK
        MOV     R2,-(SP)        ; S <- BUFFER
        JSR     PC,STOR50       ; STOR50(S)
        TST     (SP)+           ; CLEAN UP STACK
        BR      READP8          ; SKIP TO THE END
READP7:
        ADD     #12,SP          ; CLEAN UP STACK FROM READ AND LOCALS
        SEC                     ; SET CARRY (ERROR)
        BR      READP9          ; WE'RE DONE

READP8: ADD     #4,SP           ; DEALLOCATE LOCALS
        CLC                     ; CLEAR CARRY (NO ERROR)
READP9: MOV     (SP)+,R2        ; RESTORE R2
        RTS     PC              ; RETURN TO CALLER

;
; STOR50(S)
;
; RETURN THE RADIX 50 VALUE OF THE FIRST THREE CHARS OF S
;
STOR50:
        MOV     R1,-(SP)        ; SAVE R1
        MOV     R2,-(SP)        ; SAVE R2
        MOV     R3,-(SP)        ; SAVE R3

        MOV     10(SP),R2       ; R2 <- S
        MOVB    (R2)+,R3
        MOVB    R50TBL(R3),R0   ; R0 <- S[0]
        ASL     R0              ; R0 <- S[0] * 2
        ASL     R0              ; R0 <- S[0] * 4
        ASL     R0              ; R0 <- S[0] * 10
        MOV     R0,R1           ; R1 <- S[0] * 10
        ASL     R0              ; R0 <- S[0] * 20
        ASL     R0              ; R0 <- S[0] * 40
        ADD     R1,R0           ; R0 <- S[0] * 50

        MOVB    (R2)+,R3
        MOVB    R50TBL(R3),R3
        ADD     R3,R0           ; R0 <- S[0] * 50 + S[1]
        ASL     R0              ; R0 <- (S[0] * 50 + S[1]) * 2
        ASL     R0              ; R0 <- (S[0] * 50 + S[1]) * 4
        ASL     R0              ; R0 <- (S[0] * 50 + S[1]) * 10
        MOV     R0,R1           ; R1 <- (S[0] * 50 + S[1]) * 10
        ASL     R0              ; R0 <- (S[0] * 50 + S[1]) * 20
        ASL     R0              ; R0 <- (S[0] * 50 + S[1]) * 40
        ADD     R1,R0           ; R0 <- (S[0] * 50 + S[1]) * 50

        MOVB    (R2),R3
        MOVB    R50TBL(R3),R3
        ADD     R3,R0

        MOV     (SP)+,R3        ; RESTORE R3
        MOV     (SP)+,R2        ; RESTORE R2
        MOV     (SP)+,R1        ; RESTORE R1
        RTS     PC              ; RETURN TO CALLER
;
; R50TBL: ASCII TO RAD50 TABLE
;         X =  0  1  2  3  4  5  6  7
R50TBL: .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 00X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 01X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 02X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 03X
        .BYTE  0,-1,-1,-1,33,35,-1,-1  ; 04X
        .BYTE -1,-1,-1,-1,-1,-1,34,-1  ; 05X
        .BYTE 36,37,40,41,42,43,44,45  ; 06X
        .BYTE 46,47,-1,-1,-1,-1,-1,-1  ; 07X
        .BYTE -1,01,02,03,04,05,06,07  ; 10X
        .BYTE 10,11,12,13,14,15,16,17  ; 11X
        .BYTE 20,21,22,23,24,25,26,27  ; 12X
        .BYTE 30,31,32,-1,-1,-1,-1,-1  ; 13X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 14X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 15X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 16X
        .BYTE -1,-1,-1,-1,-1,-1,-1,-1  ; 17X

